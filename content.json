{"meta":{"title":"阿俊的博客","subtitle":"bug终结者","description":null,"author":"ChinaArJun","url":"github.com:ChinaArJun/ChinaArJun.github.io.git"},"pages":[],"posts":[{"title":"ios","slug":"ios","date":"2018-11-29T08:56:13.000Z","updated":"2018-11-29T08:58:29.907Z","comments":true,"path":"2018/11/29/ios/","link":"","permalink":"github.com:ChinaArJun/ChinaArJun.github.io.git/2018/11/29/ios/","excerpt":"","text":"简介在线编辑和发布hexo博客。github地址：https://github.com/jaredly/hexo-admin 安装进入hexo源文件目录，执行命令： npm install –save hexo-adminhexo server -dopen http://localhost:4000/admin/配置编辑根目录下：_config.yml文件，添加： admin: username: myfavoritename password_hash: be121740bf988b2225a313fa1f107ca1 secret: a secret something其中：username为登录的用户名，password_hash为密码的bcrypt哈希值，secret用于使cookie安全,可以尽可能复杂。 password_hash的生成首先需安装模块：sudo npm install bcrypt-nodejs执行： $ node const bcrypt = require(‘bcrypt-nodejs’)bcrypt.hashSync(‘your_password’)其中的your_password为登录密码。 若部署到远程服务器，就可以使用：http://ip:4000/admin/进行访问，在线发布hexo博客。 本片博客即是通过hexo-admin在线编辑并发布的。","categories":[],"tags":[],"keywords":[]},{"title":"解决Mac版本 Sublime text3安装Package Control问题","slug":"02web解决Mac版本 Sublime text3安装Package Control问题","date":"2018-03-24T16:03:14.610Z","updated":"2018-03-29T03:18:35.088Z","comments":true,"path":"2018/03/25/02web解决Mac版本 Sublime text3安装Package Control问题/","link":"","permalink":"github.com:ChinaArJun/ChinaArJun.github.io.git/2018/03/25/02web解决Mac版本 Sublime text3安装Package Control问题/","excerpt":"","text":"准备学习Weex开发，因为使用sublime比较方便轻量，就在这个上面安装些插件吧。其实自己遇到了较多的坑，还是不仔细哈哈1.下载Sublime3https://www.sublimetext.com/3 2.安装Package Control在线安装： https://packagecontrol.io/installation 因为网络原因可能失败。 离线安装： 下载地址： https://github.com/wbond/package_control 1.把下载好的zip包解压，重命名为Package Control。 2.打开Sublime3 菜单-&gt;Preferences-&gt;Browse Packages...然后复制Package Control文件夹到该目录、 MAC版本注意： Mac位置:/Users/用户名/Library/Application Support/Sublime Text 3/Installed Packages 3.重启Sublime3,如果菜单-&gt;Preferences有Package Setting和Package Control就说明安装成功。 4.Ctrl+Shift+p输入install选中Install Package回车就可以安装插件。 然后，你会发现遇到问题，也许是“There Are No Packages Available For Installation” 不要慌张 网上说了挺多原因，简单例举一下： 1、IPV6的问题 2、无法打开网址[https://packagecontrol.io/channel_v3.json](https://packagecontrol.io/channel_v3.json)导致访问不了 简单试一下都不行，最后我经过实验得出原因是：官方提供的Package Control就是不能用。将官方的那个Package Control删除了，自己进行添加Package Control便可以了！ 具体步骤： 1、Package Control下载网址：[Package Control下载链接](https://github.com/wbond/sublime_package_control) 下载之后将其解压后，将解压文件重新命名为：Package Control 严格按照上面明明，首字母记住要大些！！！ 2、打开Sublime，点击：首选项-&gt;浏览程序包，便会打开一个文件夹！ 然后删除这个文件夹中已有的”Package Control文件夹”，将刚才自己下载好的并且重新命名的Package Control复制到该文件夹下，然后重新启动Sublime，这样便可以使用Package Control来安装其他插件了！ 这样就能解决问题了。然后安装自己想要的插件。各种高亮都没有问题","categories":[],"tags":[],"keywords":[]},{"title":"面试之 - Socket网络编程，TCP/IP和Http等网络协议理解","slug":"01ios-Job-interview","date":"2018-03-24T16:03:14.610Z","updated":"2018-03-25T10:58:24.545Z","comments":true,"path":"2018/03/25/01ios-Job-interview/","link":"","permalink":"github.com:ChinaArJun/ChinaArJun.github.io.git/2018/03/25/01ios-Job-interview/","excerpt":"","text":"面试之 - Socket网络编程，TCP/IP和Http等网络协议理解 一、网络各个协议：TCP/IP、SOCKET、HTTP等网络七层由下往上分别为物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。其中物理层、数据链路层和网络层通常被称作媒体层，是网络工程师所研究的对象；传输层、会话层、表示层和应用层则被称作主机层，是用户所面向和关心的内容。http协议 对应于应用层tcp协议 对应于传输层ip协议 对应于网络层三者本质上没有可比性。 何况HTTP协议是基于TCP连接的。TCP/IP是传输层协议，主要解决数据如何在网络中传输；而HTTP是应用层协议，主要解决如何包装数据。我 们在传输数据时，可以只使用传输层（TCP/IP），但是那样的话，由于没有应用层，便无法识别数据内容，如果想要使传输的数据有意义，则必须使用应用层 协议，应用层协议很多，有HTTP、FTP、TELNET等等，也可以自己定义应用层协议。WEB使用HTTP作传输层协议，以封装HTTP文本信息，然 后使用TCP/IP做传输层协议将它发送到网络上。Socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口（API），通过Socket，我们才能使用TCP/IP协议。 二、Http和Socket连接区别相信不少学习手机联网开发的朋友都接触过Http与Socket连接,究竟他们有什么区别,这边浅谈下个人理解。 2.1、TCP连接Socket是对TCP/IP协议的封装,要想明白Socket连接，先要明白TCP连接。手机能够使用联网功能是因为手机底层实现了TCP/IP协议，可以使手机终端通过无线网络建立TCP连接。TCP协议可以对上层网络提供接口，使上层网络数据的传输建立在“无差别”的网络之上。建立起一个TCP连接需要经过“三次握手”：第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。握 手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连 接之前，TCP 连接都将被一直保持下去。断开连接时服务器和客户端均可以主动发起断开TCP连接的请求，断开过程需要经过“四次握手”（过程就不细写了，就是服务器和客 户端交互，最终确定断开） 2.1.1 TCP 连接的建立步骤典型的 TCP 客户端要经过下面三步操作：• 创建一个 Socket 实例：构造函数向指定的远程主机和端口建立一个 TCP 连接；• 通过套接字的 I/O 流与服务端通信；• 使用 Socket 类的 close 方法关闭连接。服务端的工作是建立一个通信终端，并被动地等待客户端的连接。典型的 TCP 服务端执行如下两步操作： 创建一个 ServerSocket 实例并指定本地端口，用来监听客户端在该端口发送的 TCP 连接请求； 重复执行：• 调用 ServerSocket 的 accept（）方法以获取客户端连接，并通过其返回值创建一个 Socket 实例；• 为返回的 Socket 实例开启新的线程，并使用返回的 Socket 实例的 I/O 流与客户端通信； 通信完成后，使用 Socket 类的 close（）方法关闭该客户端的套接字连接。 2.2、HTTP连接HTTP协议即超文本传送协议(HypertextTransfer Protocol )，是Web联网的基础，也是手机联网常用的协议之一，HTTP协议是建立在TCP协议之上的一种应用。HTTP连接最显著的特点是客户端发送的每次请求都需要服务器回送响应，在请求结束后，会主动释放连接。从建立连接到关闭连接的过程称为“一次连接”。1）在HTTP 1.0中，客户端的每次请求都要求建立一次单独的连接，在处理完本次请求后，就自动释放连接。2）在HTTP 1.1中则可以在一次连接中处理多个请求，并且多个请求可以重叠进行，不需要等待一个请求结束后再发送下一个请求。3) 在 HTTP 2.0中,多路复用,Http2连接可以承载数十或数百个流的复用，多路复用意味著来自很多流的数据包能够混合在一起通过同样连接传输，两列不同火车被混合在一起传输，当到达终点时，它们又被拆开组成两列不同的火车。由 于HTTP在每次请求结束后都会主动释放连接，因此HTTP连接是一种“短连接”，要保持客户端程序的在线状态，需要不断地向服务器发起连接请求。通常的 做法是即时不需要获得任何数据，客户端也保持每隔一段固定的时间向服务器发送一次“保持连接”的请求，服务器在收到该请求后对客户端进行回复，表明知道客 户端“在线”。若服务器长时间无法收到客户端的请求，则认为客户端“下线”，若客户端长时间无法收到服务器的回复，则认为网络已经断开。三、SOCKET原理 3.1、套接字（socket）概念套接字（socket）是通信的基石，是支持TCP/IP协议的网络通信的基本操作单元。它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：连接使用的协议，本地主机的IP地址，本地进程的协议端口，远地主机的IP地址，远地进程的协议端口。应 用层通过传输层进行数据通信时，TCP会遇到同时为多个应用程序进程提供并发服务的问题。多个TCP连接或多个应用程序进程可能需要通过同一个 TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP／IP协议交互提供了套接字(Socket)接口。应 用层可以和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务。 3.2 、建立socket连接建立Socket连接至少需要一对套接字，其中一个运行于客户端，称为ClientSocket，另一个运行于服务器端，称为ServerSocket。套接字之间的连接过程分为三个步骤：服务器监听，客户端请求，连接确认。服务器监听：服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。客户端请求：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。连 接确认：当服务器端套接字监听到或者说接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户 端，一旦客户端确认了此描述，双方就正式建立连接。而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。 3.3、SOCKET连接与TCP连接协议相当于相互通信的程序间达成的一种约定，它规定了分组报文的结构、交换方式、包含的意义以及怎样对报文所包含的信息进行解析TCP/IP 协议族有 IP 协议、TCP 协议和 UDP 协议。现在 TCP/IP 协议族中的主要 socket 类型为流套接字（使用 TCP 协议）和数据报套接字（使用 UDP 协议）。TCP 协议提供面向连接的服务，通过它建立的是可靠地连接。Java 为 TCP 协议提供了两个类：Socke 类和 ServerSocket 类。一个 Socket 实例代表了 TCP 连接的一个客户端，而一个 ServerSocket 实例代表了 TCP连接的一个服务器端，一般在 TCP Socket 编程中，客户端有多个，而服务器端只有一个，客户端 TCP 向服务器端 TCP 发送连接请求，服务器端的 ServerSocket 实例则监听来自客户端的 TCP 连接请求，并为每个请求创建新的 Socket 实例，由于服务端在调用 accept（）等待客户端的连接请求时会阻塞，直到收到客户端发送的连接请求才会继续往下执行代码，因此要为每个 Socket 连接开启一个线程。服务器端要同时处理 ServerSocket 实例和 Socket 实例，而客户端只需要使用 Socket 实例。另外，每个 Socket 实例会关联一个 InputStream和 OutputStream 对象，我们通过将字节写入套接字的 OutputStream 来发送数据，并通过从 InputStream 来接收数据。客户端向服务器端发送连接请求后，就被动地等待服务器的响应。","categories":[],"tags":[],"keywords":[]}]}