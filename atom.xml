<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿俊的博客</title>
  
  <subtitle>每天成长一点点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="github.com:cnAJun/cnAJun.github.io/"/>
  <updated>2018-12-05T08:52:49.000Z</updated>
  <id>github.com:cnAJun/cnAJun.github.io/</id>
  
  <author>
    <name>阿俊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring基础(1)</title>
    <link href="github.com:cnAJun/cnAJun.github.io/2018/12/05/Spring%E5%9F%BA%E7%A1%80/"/>
    <id>github.com:cnAJun/cnAJun.github.io/2018/12/05/Spring基础/</id>
    <published>2018-12-04T16:23:52.000Z</published>
    <updated>2018-12-05T08:52:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一章-Spring简史"><a href="#第一章-Spring简史" class="headerlink" title="第一章 Spring简史"></a>第一章 Spring简史</h3><p>第一阶段：XML配置</p><p>在Spring1.x时代，都是使用XML配置Bean，随着项目扩大，我们把XML文件切分成多个配置文件，那时候需要频繁地在开发类和配置文件之间切换</p><p>第二阶段：注解配置</p><p>在Spring2.x时代，随着JDK1.5带来的注解支持，Spring提供了声明Bean的注解（如@Service等），大大减少了配置量。这时Spring圈子里存在一种争论：注解配置和XML配置究竟哪个更好？我们最终的选择是应用的基本配置用XML，业务配置用注解。</p><p>第三阶段：Java配置</p><p>从Spring3.x开始，Spring提供了JAVA配置的能力。Spring4.x信Spring Boot都推荐使用JAVA配置。使用JAVA配置可以让你更理解你所配置的Bean。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;第一章-Spring简史&quot;&gt;&lt;a href=&quot;#第一章-Spring简史&quot; class=&quot;headerlink&quot; title=&quot;第一章 Spring简史&quot;&gt;&lt;/a&gt;第一章 Spring简史&lt;/h3&gt;&lt;p&gt;第一阶段：XML配置&lt;/p&gt;
&lt;p&gt;在Spring1.x时代
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java基础巩固之注解(7)</title>
    <link href="github.com:cnAJun/cnAJun.github.io/2018/12/03/java%E5%9F%BA%E7%A1%80%E5%B7%A9%E5%9B%BA%E4%B9%8B%E6%B3%A8%E8%A7%A3-7/"/>
    <id>github.com:cnAJun/cnAJun.github.io/2018/12/03/java基础巩固之注解-7/</id>
    <published>2018-12-03T03:20:08.000Z</published>
    <updated>2018-12-03T03:20:08.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java 历史版本新特性</title>
    <link href="github.com:cnAJun/cnAJun.github.io/2014/12/28/Java%E5%9F%BA%E7%A1%80%E5%B7%A9%E5%9B%BA%E4%B9%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-4/"/>
    <id>github.com:cnAJun/cnAJun.github.io/2014/12/28/Java基础巩固之设计模式-4/</id>
    <published>2014-12-27T16:19:00.000Z</published>
    <updated>2018-12-02T17:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JDK5新特性-自己实现枚举类"><a href="#JDK5新特性-自己实现枚举类" class="headerlink" title="JDK5新特性-自己实现枚举类"></a>JDK5新特性-自己实现枚举类</h3><ul><li>A:枚举概述<ul><li>是指将变量的值一一列出来,变量的值只限于列举出来的值的范围内。举例：一周只有7天，一年只有12个月等。</li></ul></li><li>B:回想单例设计模式：单例类是一个类只有一个实例<ul><li>那么多例类就是一个类有多个实例，但不是无限个数的实例，而是有限个数的实例。这才能是枚举类。</li></ul></li></ul><a id="more"></a><ul><li>C:案例演示<ul><li>自己实现枚举类<br>1,自动拆装箱<br>2,泛型<br>3,可变参数<br>4,静态导入<br>5,增强for循环<br>6,互斥锁<br>7,枚举</li></ul></li></ul><h3 id="JDK5新特性-通过enum实现枚举类"><a href="#JDK5新特性-通过enum实现枚举类" class="headerlink" title="JDK5新特性-通过enum实现枚举类"></a>JDK5新特性-通过enum实现枚举类</h3><ul><li>A:案例演示<ul><li>通过enum实现枚举类</li></ul></li></ul><h3 id="JDK5新特性-枚举的注意事项"><a href="#JDK5新特性-枚举的注意事项" class="headerlink" title="JDK5新特性-枚举的注意事项"></a>JDK5新特性-枚举的注意事项</h3><ul><li>A:案例演示<ul><li>定义枚举类要用关键字enum</li><li>所有枚举类都是Enum的子类</li><li>枚举类的第一行上必须是枚举项，最后一个枚举项后的分号是可以省略的，但是如果枚举类有其他的东西，这个分号就不能省略。建议不要省略</li><li>枚举类可以有构造器，但必须是private的，它默认的也是private的。</li><li>枚举类也可以有抽象方法，但是枚举项必须重写该方法</li><li>枚举在switch语句中的使用</li></ul></li></ul><h3 id="JDK5新特性-枚举类的常见方法"><a href="#JDK5新特性-枚举类的常见方法" class="headerlink" title="JDK5新特性-枚举类的常见方法"></a>JDK5新特性-枚举类的常见方法</h3><ul><li>A:枚举类的常见方法<ul><li>int ordinal()</li><li>int compareTo(E o)</li><li>String name()</li><li>String toString()</li><li><t> T valueOf(Class<t> type,String name)</t></t></li><li>values() </li><li>此方法虽然在JDK文档中查找不到，但每个枚举类都具有该方法，它遍历枚举类的所有枚举值非常方便</li></ul></li><li>B:案例演示<ul><li>枚举类的常见方法</li></ul></li></ul><h3 id="JDK7新特性-JDK7的六个新特性回顾和讲解"><a href="#JDK7新特性-JDK7的六个新特性回顾和讲解" class="headerlink" title="JDK7新特性-JDK7的六个新特性回顾和讲解"></a>JDK7新特性-JDK7的六个新特性回顾和讲解</h3><ul><li>A:二进制字面量</li><li>B:数字字面量可以出现下划线</li><li>C:switch 语句可以用字符串</li><li>D:泛型简化,菱形泛型</li><li>E:异常的多个catch合并,每个异常用或|</li><li>F:try-with-resources 语句</li></ul><h3 id="JDK8新特性-JDK8的新特性"><a href="#JDK8新特性-JDK8的新特性" class="headerlink" title="JDK8新特性-JDK8的新特性"></a>JDK8新特性-JDK8的新特性</h3><ul><li>接口中可以定义有方法体的方法,如果是非静态,必须用default修饰    </li><li>如果是静态的就不用了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Inner i = <span class="keyword">new</span> Inner();</span><br><span class="line">i.method();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>局部内部类在访问他所在方法中的局部变量必须用final修饰,为什么?</li><li>因为当调用这个方法时,局部变量如果没有用final修饰,他的生命周期和方法的生命周期是一样的,当方法弹栈,这个局部变量也会消失,那么如果局部内部类对象还没有马上消失想用这个局部变量,就没有了,如果用final修饰会在类加载的时候进入常量池,即使方法弹栈,常量池的常量还在,也可以继续使用</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JDK5新特性-自己实现枚举类&quot;&gt;&lt;a href=&quot;#JDK5新特性-自己实现枚举类&quot; class=&quot;headerlink&quot; title=&quot;JDK5新特性-自己实现枚举类&quot;&gt;&lt;/a&gt;JDK5新特性-自己实现枚举类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A:枚举概述&lt;ul&gt;
&lt;li&gt;是指将变量的值一一列出来,变量的值只限于列举出来的值的范围内。举例：一周只有7天，一年只有12个月等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;B:回想单例设计模式：单例类是一个类只有一个实例&lt;ul&gt;
&lt;li&gt;那么多例类就是一个类有多个实例，但不是无限个数的实例，而是有限个数的实例。这才能是枚举类。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程语言" scheme="github.com:cnAJun/cnAJun.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="JDK" scheme="github.com:cnAJun/cnAJun.github.io/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat和Nginx对应多个子域名的配置</title>
    <link href="github.com:cnAJun/cnAJun.github.io/2014/12/23/Tomcat/"/>
    <id>github.com:cnAJun/cnAJun.github.io/2014/12/23/Tomcat/</id>
    <published>2014-12-23T06:24:00.000Z</published>
    <updated>2018-12-04T16:34:29.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在网上找了半天也没找到相关的资料,都说的太含糊.</li><li>本人对tomcat下配置 一ip对多域名的方法详细如下,按下面配置一定能成功,经过测试了.</li><li>此方法也可以配置线上域名服务,比如加域名前缀如api.test.com,admin.test.com等指定不同的文件夹目录</li><li>如下图<br><img src="/images/tomcat1.png" alt=""><br><img src="/images/tomcat2.png" alt=""><a id="more"></a><h3 id="Nginx配置方式"><a href="#Nginx配置方式" class="headerlink" title="Nginx配置方式"></a>Nginx配置方式</h3></li><li>找到对应的conf文件，vi编辑文件,主要修改以下两个位置<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server_name web.Test.com  api.Test.com;</span><br><span class="line">root /data/wwwroot/www.Test.com;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Tomcat配置方式"><a href="#Tomcat配置方式" class="headerlink" title="Tomcat配置方式"></a>Tomcat配置方式</h3><p>hosts配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span> <span class="attr">debug</span>=<span class="string">"0"</span> <span class="attr">appBase</span>=<span class="string">"D://Tomcat 5.0//webapps"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlValidation</span>=<span class="string">"false"</span> <span class="attr">xmlNamespaceAware</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Alias</span>&gt;</span>localhost.com<span class="tag">&lt;/<span class="name">Alias</span>&gt;</span> </span><br><span class="line">       <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.logger.FileLogger"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">directory</span>=<span class="string">"logs"</span>  <span class="attr">prefix</span>=<span class="string">"localhost_log."</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timestamp</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">""</span> <span class="attr">docBase</span>=<span class="string">"D://Tomcat 5.0//webapps//gg"</span>  <span class="attr">reloadable</span>=<span class="string">"true"</span> <span class="attr">caseSensitive</span>=<span class="string">"false"</span> <span class="attr">debug</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"one.localhost"</span> <span class="attr">debug</span>=<span class="string">"0"</span> <span class="attr">appBase</span>=<span class="string">"D://Tomcat 5.0//webapps"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlValidation</span>=<span class="string">"false"</span> <span class="attr">xmlNamespaceAware</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Alias</span>&gt;</span>one.localhost.com<span class="tag">&lt;/<span class="name">Alias</span>&gt;</span> </span><br><span class="line">       <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.logger.FileLogger"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">directory</span>=<span class="string">"logs"</span>  <span class="attr">prefix</span>=<span class="string">"localhost_log."</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timestamp</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">""</span> <span class="attr">docBase</span>=<span class="string">"D://Tomcat 5.0//webapps//kk//a"</span>  <span class="attr">reloadable</span>=<span class="string">"true"</span> <span class="attr">caseSensitive</span>=<span class="string">"false"</span> <span class="attr">debug</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"two.localhost"</span> <span class="attr">debug</span>=<span class="string">"0"</span> <span class="attr">appBase</span>=<span class="string">"D://Tomcat 5.0//webapps"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlValidation</span>=<span class="string">"false"</span> <span class="attr">xmlNamespaceAware</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Alias</span>&gt;</span>two.localhost.com<span class="tag">&lt;/<span class="name">Alias</span>&gt;</span> </span><br><span class="line">       <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.logger.FileLogger"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">directory</span>=<span class="string">"logs"</span>  <span class="attr">prefix</span>=<span class="string">"localhost_log."</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timestamp</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">""</span> <span class="attr">docBase</span>=<span class="string">"D://Tomcat 5.0//webapps//kk//b"</span>  <span class="attr">reloadable</span>=<span class="string">"true"</span> <span class="attr">caseSensitive</span>=<span class="string">"false"</span> <span class="attr">debug</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>因无域名解析服务器,所以在hosts上配,来模拟dns解析.</p><p>10.1.1.241  localhost           指向gg文件夹<br>10.1.1.241  localhost.com       指向gg文件夹<br>10.1.1.241  one.localhost       指向a文件夹<br>10.1.1.241  one.localhost.com   指向a文件夹<br>10.1.1.241  two.localhost       指向b文件夹<br>10.1.1.241  two.localhost.com   指向b文件夹</p><ul><li><p>经过多方面尝试,终于在tomcat下配置成功了.</p></li><li><p>修改默认的应用时：改defaulthost,并将context的path置为空。</p></li><li><p>配置多个应用时：</p></li></ul><p>如：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p><pre><code>http://localhost:8080/firsthttp://localhost:8080/second</code></pre><p>对应的配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span> <span class="attr">debug</span>=<span class="string">"0"</span> <span class="attr">appBase</span>=<span class="string">"D://Tomcat 5.0//webapps"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlValidation</span>=<span class="string">"false"</span> <span class="attr">xmlNamespaceAware</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Alias</span>&gt;</span>localhost.com<span class="tag">&lt;/<span class="name">Alias</span>&gt;</span> </span><br><span class="line">       <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.logger.FileLogger"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">directory</span>=<span class="string">"logs"</span>  <span class="attr">prefix</span>=<span class="string">"localhost_log."</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timestamp</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">""</span> <span class="attr">docBase</span>=<span class="string">"D://Tomcat 5.0//webapps//Root"</span>  <span class="attr">reloadable</span>=<span class="string">"true"</span> <span class="attr">caseSensitive</span>=<span class="string">"false"</span> <span class="attr">debug</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/first"</span> <span class="attr">docBase</span>=<span class="string">"D://Tomcat 5.0//webapps//first"</span>  <span class="attr">reloadable</span>=<span class="string">"true"</span> <span class="attr">caseSensitive</span>=<span class="string">"false"</span> <span class="attr">debug</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/second"</span> <span class="attr">docBase</span>=<span class="string">"D://Tomcat 5.0//webapps//second"</span>  <span class="attr">reloadable</span>=<span class="string">"true"</span> <span class="attr">caseSensitive</span>=<span class="string">"false"</span> <span class="attr">debug</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;在网上找了半天也没找到相关的资料,都说的太含糊.&lt;/li&gt;
&lt;li&gt;本人对tomcat下配置 一ip对多域名的方法详细如下,按下面配置一定能成功,经过测试了.&lt;/li&gt;
&lt;li&gt;此方法也可以配置线上域名服务,比如加域名前缀如api.test.com,admin.test.com等指定不同的文件夹目录&lt;/li&gt;
&lt;li&gt;如下图&lt;br&gt;&lt;img src=&quot;/images/tomcat1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/tomcat2.png&quot; alt=&quot;&quot;&gt;
    
    </summary>
    
      <category term="JAVA配置" scheme="github.com:cnAJun/cnAJun.github.io/categories/JAVA%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Tomcat" scheme="github.com:cnAJun/cnAJun.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>java基础巩固之多线程线程通信(6)</title>
    <link href="github.com:cnAJun/cnAJun.github.io/2014/12/07/java%E5%9F%BA%E7%A1%80%E5%B7%A9%E5%9B%BA%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-6/"/>
    <id>github.com:cnAJun/cnAJun.github.io/2014/12/07/java基础巩固之多线程并发编程-6/</id>
    <published>2014-12-06T16:58:00.000Z</published>
    <updated>2018-12-02T17:28:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="多线程-单例"><a href="#多线程-单例" class="headerlink" title="多线程-单例"></a>多线程-单例</h3><ul><li><p>单例设计模式：保证类在内存中只有一个对象。</p></li><li><p>如何保证类在内存中只有一个对象呢？</p><ul><li>(1)控制类的创建，不让其他类来创建本类的对象。private</li><li>(2)在本类中定义一个本类的对象。Singleton s;</li><li>(3)提供公共的访问方式。  public static Singleton getInstance(){return s}<a id="more"></a></li></ul></li><li>单例写法两种：<ul><li>(1)饿汉式 开发用这种方式。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="comment">//1,私有构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//2,创建本类对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton s = <span class="keyword">new</span> Singleton();</span><br><span class="line"><span class="comment">//3,对外提供公共的访问方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"11111111111"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>(2)懒汉式 面试写这种方式。多线程的问题？</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//懒汉式,单例的延迟加载模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="comment">//1,私有构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//2,声明一个本类的引用</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton s;</span><br><span class="line"><span class="comment">//3,对外提供公共的访问方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="keyword">null</span>)</span><br><span class="line"><span class="comment">//线程1,线程2</span></span><br><span class="line">s = <span class="keyword">new</span> Singleton();</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"11111111111"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>(3)第三种格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton s = <span class="keyword">new</span> Singleton();<span class="comment">//final是最终的意思,被final修饰的变量不可以被更改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多线程-Runtime类"><a href="#多线程-Runtime类" class="headerlink" title="多线程-Runtime类"></a>多线程-Runtime类</h3><ul><li>Runtime类是一个单例类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Runtime r = Runtime.getRuntime();</span><br><span class="line"><span class="comment">//r.exec("shutdown -s -t 300");//300秒后关机</span></span><br><span class="line">r.exec(<span class="string">"shutdown -a"</span>);<span class="comment">//取消关机</span></span><br></pre></td></tr></table></figure><h3 id="多线程-Timer"><a href="#多线程-Timer" class="headerlink" title="多线程-Timer"></a>多线程-Timer</h3><ul><li>Timer类:计时器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5_Timer</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * 计时器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">Timer t = <span class="keyword">new</span> Timer();</span><br><span class="line">t.schedule(<span class="keyword">new</span> MyTimerTask(), <span class="keyword">new</span> Date(<span class="number">114</span>,<span class="number">9</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">54</span>,<span class="number">20</span>),<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTimerTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"起床背英语单词"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多线程-两个线程间的通信"><a href="#多线程-两个线程间的通信" class="headerlink" title="多线程-两个线程间的通信"></a>多线程-两个线程间的通信</h3><ul><li>1.什么时候需要通信<ul><li>多个线程并发执行时, 在默认情况下CPU是随机切换线程的</li><li>如果我们希望他们有规律的执行, 就可以使用通信, 例如每个线程执行一次打印</li></ul></li><li>2.怎么通信<ul><li>如果希望线程等待, 就调用wait()</li><li>如果希望唤醒等待的线程, 就调用notify();</li><li>这两个方法必须在同步代码中执行, 并且使用同步锁对象来调用</li></ul></li></ul><h3 id="多线程-三个或三个以上间的线程通信"><a href="#多线程-三个或三个以上间的线程通信" class="headerlink" title="多线程-三个或三个以上间的线程通信"></a>多线程-三个或三个以上间的线程通信</h3><ul><li>多个线程通信的问题<ul><li>notify()方法是随机唤醒一个线程</li><li>notifyAll()方法是唤醒所有线程</li><li>JDK5之前无法唤醒指定的一个线程</li><li>如果多个线程之间通信, 需要使用notifyAll()通知所有线程, 用while来反复判断条件<h3 id="多线程-JDK1-5的新特性互斥锁"><a href="#多线程-JDK1-5的新特性互斥锁" class="headerlink" title="多线程-JDK1.5的新特性互斥锁"></a>多线程-JDK1.5的新特性互斥锁</h3></li></ul></li><li>1.同步<ul><li>使用ReentrantLock类的lock()和unlock()方法进行同步</li></ul></li><li>2.通信<ul><li>使用ReentrantLock类的newCondition()方法可以获取Condition对象</li><li>需要等待的时候使用Condition的await()方法, 唤醒的时候用signal()方法</li><li>不同的线程使用不同的Condition, 这样就能区分唤醒的时候找哪个线程了</li></ul></li></ul><h3 id="多线程-线程组的概述和使用"><a href="#多线程-线程组的概述和使用" class="headerlink" title="多线程-线程组的概述和使用"></a>多线程-线程组的概述和使用</h3><ul><li>A:线程组概述<ul><li>Java中使用ThreadGroup来表示线程组，它可以对一批线程进行分类管理，Java允许程序直接对线程组进行控制。</li><li>默认情况下，所有的线程都属于主线程组。<ul><li>public final ThreadGroup getThreadGroup()//通过线程对象获取他所属于的组</li><li>public final String getName()//通过线程组对象获取他组的名字</li></ul></li><li>我们也可以给线程设置分组<ul><li>1,ThreadGroup(String name) 创建线程组对象并给其赋值名字</li><li>2,创建线程对象</li><li>3,Thread(ThreadGroup?group, Runnable?target, String?name) </li><li>4,设置整组的优先级或者守护线程</li></ul></li><li>B:案例演示<ul><li>线程组的使用,默认是主线程组</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">MyRunnable mr = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(mr, <span class="string">"张三"</span>);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(mr, <span class="string">"李四"</span>);</span><br><span class="line"><span class="comment">//获取线程组</span></span><br><span class="line"><span class="comment">// 线程类里面的方法：public final ThreadGroup getThreadGroup()</span></span><br><span class="line">ThreadGroup tg1 = t1.getThreadGroup();</span><br><span class="line">ThreadGroup tg2 = t2.getThreadGroup();</span><br><span class="line"><span class="comment">// 线程组里面的方法：public final String getName()</span></span><br><span class="line">String name1 = tg1.getName();</span><br><span class="line">String name2 = tg2.getName();</span><br><span class="line">System.out.println(name1);</span><br><span class="line">System.out.println(name2);</span><br><span class="line"><span class="comment">// 通过结果我们知道了：线程默认情况下属于main线程组</span></span><br><span class="line"><span class="comment">// 通过下面的测试，你应该能够看到，默任情况下，所有的线程都属于同一个组</span></span><br><span class="line">System.out.println(Thread.currentThread().getThreadGroup().getName());</span><br><span class="line"></span><br><span class="line">* 自己设定线程组</span><br><span class="line">* </span><br><span class="line"><span class="comment">// ThreadGroup(String name)</span></span><br><span class="line">ThreadGroup tg = <span class="keyword">new</span> ThreadGroup(<span class="string">"这是一个新的组"</span>);</span><br><span class="line"></span><br><span class="line">MyRunnable mr = <span class="keyword">new</span> MyRunnable();</span><br><span class="line"><span class="comment">// Thread(ThreadGroup group, Runnable target, String name)</span></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(tg, mr, <span class="string">"张三"</span>);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(tg, mr, <span class="string">"李四"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(t1.getThreadGroup().getName());</span><br><span class="line">System.out.println(t2.getThreadGroup().getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过组名称设置后台线程，表示该组的线程都是后台线程</span></span><br><span class="line">tg.setDaemon(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h3 id="多线程-线程的五种状态"><a href="#多线程-线程的五种状态" class="headerlink" title="多线程-线程的五种状态"></a>多线程-线程的五种状态</h3><ul><li>看图说话</li><li>新建,就绪,运行,阻塞,死亡</li></ul><h3 id="多线程-线程池的概述和使用"><a href="#多线程-线程池的概述和使用" class="headerlink" title="多线程-线程池的概述和使用"></a>多线程-线程池的概述和使用</h3><ul><li>A:线程池概述<ul><li>程序启动一个新线程成本是比较高的，因为它涉及到要与操作系统进行交互。而使用线程池可以很好的提高性能，尤其是当程序中要创建大量生存期很短的线程时，更应该考虑使用线程池。线程池里的每一个线程代码结束后，并不会死亡，而是再次回到线程池中成为空闲状态，等待下一个对象来使用。在JDK5之前，我们必须手动实现自己的线程池，从JDK5开始，Java内置支持线程池</li></ul></li><li>B:内置线程池的使用概述<ul><li>JDK5新增了一个Executors工厂类来产生线程池，有如下几个方法<ul><li>public static ExecutorService newFixedThreadPool(int nThreads)</li><li>public static ExecutorService newSingleThreadExecutor()</li><li>这些方法的返回值是ExecutorService对象，该对象表示一个线程池，可以执行Runnable对象或者Callable对象代表的线程。它提供了如下方法</li><li>Future&lt;?&gt; submit(Runnable task)</li><li><t> Future<t> submit(Callable<t> task)</t></t></t></li></ul></li><li>使用步骤：<ul><li>创建线程池对象</li><li>创建Runnable实例</li><li>提交Runnable实例</li><li>关闭线程池</li></ul></li><li>C:案例演示<ul><li>提交的是Runnable</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// public static ExecutorService newFixedThreadPool(int nThreads)</span></span><br><span class="line">ExecutorService pool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以执行Runnable对象或者Callable对象代表的线程</span></span><br><span class="line">pool.submit(<span class="keyword">new</span> MyRunnable());</span><br><span class="line">pool.submit(<span class="keyword">new</span> MyRunnable());</span><br><span class="line"></span><br><span class="line"><span class="comment">//结束线程池</span></span><br><span class="line">pool.shutdown();</span><br></pre></td></tr></table></figure><h3 id="多线程-多线程程序实现的方式3"><a href="#多线程-多线程程序实现的方式3" class="headerlink" title="多线程-多线程程序实现的方式3"></a>多线程-多线程程序实现的方式3</h3><ul><li>提交的是Callable</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建线程池对象</span></span><br><span class="line">ExecutorService pool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以执行Runnable对象或者Callable对象代表的线程</span></span><br><span class="line">Future&lt;Integer&gt; f1 = pool.submit(<span class="keyword">new</span> MyCallable(<span class="number">100</span>));</span><br><span class="line">Future&lt;Integer&gt; f2 = pool.submit(<span class="keyword">new</span> MyCallable(<span class="number">200</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// V get()</span></span><br><span class="line">Integer i1 = f1.get();</span><br><span class="line">Integer i2 = f2.get();</span><br><span class="line"></span><br><span class="line">System.out.println(i1);</span><br><span class="line">System.out.println(i2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束</span></span><br><span class="line">pool.shutdown();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyCallable</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.number = number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= number; x++) &#123;</span><br><span class="line">sum += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>多线程程序实现的方式3的好处和弊端</p><ul><li><p>好处：</p><ul><li>可以有返回值</li><li>可以抛出异常</li></ul></li><li><p>弊端：</p><ul><li>代码比较复杂，所以一般不用</li></ul></li></ul></li></ul><p>###25.11_设计模式(简单工厂模式概述和使用)(了解)</p><ul><li>A:简单工厂模式概述<ul><li>又叫静态工厂方法模式，它定义一个具体的工厂类负责创建一些类的实例</li></ul></li><li>B:优点<ul><li>客户端不需要在负责对象的创建，从而明确了各个类的职责</li></ul></li><li>C:缺点<ul><li>这个静态工厂类负责所有对象的创建，如果有新的对象增加，或者某些对象的创建方式不同，就需要不断的修改工厂类，不利于后期的维护</li></ul></li><li>D:案例演示<ul><li>动物抽象类：public abstract Animal { public abstract void eat(); }</li><li>具体狗类：public class Dog extends Animal {}</li><li>具体猫类：public class Cat extends Animal {}</li><li>开始，在测试类中每个具体的内容自己创建对象，但是，创建对象的工作如果比较麻烦，就需要有人专门做这个事情，所以就知道了一个专门的类来创建对象。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">AnimalFactory</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//public static Dog createDog() &#123;return new Dog();&#125;</span></span><br><span class="line"><span class="comment">//public static Cat createCat() &#123;return new Cat();&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//改进</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title">createAnimal</span><span class="params">(String animalName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(“dog”.equals(animalName)) &#123;&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(“cat”.equals(animale)) &#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;多线程-单例&quot;&gt;&lt;a href=&quot;#多线程-单例&quot; class=&quot;headerlink&quot; title=&quot;多线程-单例&quot;&gt;&lt;/a&gt;多线程-单例&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单例设计模式：保证类在内存中只有一个对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何保证类在内存中只有一个对象呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1)控制类的创建，不让其他类来创建本类的对象。private&lt;/li&gt;
&lt;li&gt;(2)在本类中定义一个本类的对象。Singleton s;&lt;/li&gt;
&lt;li&gt;(3)提供公共的访问方式。  public static Singleton getInstance(){return s}
    
    </summary>
    
      <category term="编程语言" scheme="github.com:cnAJun/cnAJun.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="多线程" scheme="github.com:cnAJun/cnAJun.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java基础巩固之多线程安全(5)</title>
    <link href="github.com:cnAJun/cnAJun.github.io/2014/12/05/java%E5%9F%BA%E7%A1%80%E5%B7%A9%E5%9B%BA%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8-4/"/>
    <id>github.com:cnAJun/cnAJun.github.io/2014/12/05/java基础巩固之多线程安全-4/</id>
    <published>2014-12-04T16:44:00.000Z</published>
    <updated>2018-12-02T17:28:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="多线程-同步代码块"><a href="#多线程-同步代码块" class="headerlink" title="多线程-同步代码块"></a>多线程-同步代码块</h3><ul><li>1.什么情况下需要同步<ul><li>当多线程并发, 有多段代码同时执行时, 我们希望某一段代码执行的过程中CPU不要切换到其他线程工作. 这时就需要同步.</li><li>如果两段代码是同步的, 那么同一时间只能执行一段, 在一段代码没执行结束之前, 不会执行另外一段代码.</li></ul></li><li>2.同步代码块<ul><li>使用synchronized关键字加上一个锁对象来定义一段代码, 这就叫同步代码块</li><li>多个同步代码块如果使用相同的锁对象, 那么他们就是同步的</li></ul></li></ul><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span> </span>&#123;</span><br><span class="line">Demo d = <span class="keyword">new</span> Demo();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(d)&#123;</span><br><span class="line">                 <span class="comment">//锁对象可以是任意对象,但是被锁的代码需要保证是同一把锁,不能用匿名对象</span></span><br><span class="line">                 System.out.print(<span class="string">"\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="keyword">synchronized</span>(d)&#123;</span><br><span class="line">             System.out.print(<span class="string">"\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多线程-同步方法"><a href="#多线程-同步方法" class="headerlink" title="多线程-同步方法"></a>多线程-同步方法</h3><ul><li>使用synchronized关键字修饰一个方法, 该方法中所有的代码都是同步的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(Printer.class)&#123;<span class="comment">//锁对象可以是任意对象,但是被锁的代码需要保证是同一把锁,不能用匿名对象</span></span><br><span class="line">System.out.print(<span class="string">"黑"</span>);</span><br><span class="line">System.out.print(<span class="string">"马"</span>);</span><br><span class="line">System.out.print(<span class="string">"程"</span>);</span><br><span class="line">System.out.print(<span class="string">"序"</span>);</span><br><span class="line">System.out.print(<span class="string">"员"</span>);</span><br><span class="line">System.out.print(<span class="string">"\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 非静态同步函数的锁是:this</span></span><br><span class="line"><span class="comment"> * 静态的同步函数的锁是:字节码对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">print2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.print(<span class="string">"传"</span>);</span><br><span class="line">System.out.print(<span class="string">"智"</span>);</span><br><span class="line">System.out.print(<span class="string">"播"</span>);</span><br><span class="line">System.out.print(<span class="string">"客"</span>);</span><br><span class="line">System.out.print(<span class="string">"\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多线程-线程安全问题"><a href="#多线程-线程安全问题" class="headerlink" title="多线程-线程安全问题"></a>多线程-线程安全问题</h3><ul><li>多线程并发操作同一数据时, 就有可能出现线程安全问题</li><li>使用同步技术可以解决这种问题, 把操作数据的代码进行同步, 不要多个线程一起操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_Synchronized</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * 需求:铁路售票,一共100张,通过四个窗口卖完.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">TicketsSeller t1 = <span class="keyword">new</span> TicketsSeller();</span><br><span class="line">TicketsSeller t2 = <span class="keyword">new</span> TicketsSeller();</span><br><span class="line">TicketsSeller t3 = <span class="keyword">new</span> TicketsSeller();</span><br><span class="line">TicketsSeller t4 = <span class="keyword">new</span> TicketsSeller();</span><br><span class="line"></span><br><span class="line">t1.setName(<span class="string">"窗口1"</span>);</span><br><span class="line">t2.setName(<span class="string">"窗口2"</span>);</span><br><span class="line">t3.setName(<span class="string">"窗口3"</span>);</span><br><span class="line">t4.setName(<span class="string">"窗口4"</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">t4.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TicketsSeller</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> tickets = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TicketsSeller</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TicketsSeller</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span>(obj) &#123;</span><br><span class="line"><span class="keyword">if</span>(tickets &lt;= <span class="number">0</span>) </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">//线程1睡,线程2睡,线程3睡,线程4睡</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(getName() + <span class="string">"...这是第"</span> + tickets-- + <span class="string">"号票"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多线程-死锁"><a href="#多线程-死锁" class="headerlink" title="多线程-死锁"></a>多线程-死锁</h3><ul><li>多线程同步的时候, 如果同步代码嵌套, 使用相同锁, 就有可能出现死锁<ul><li>尽量不要嵌套使用</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String s1 = <span class="string">"筷子左"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String s2 = <span class="string">"筷子右"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span>(s1) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">"...拿到"</span> + s1 + <span class="string">"等待"</span> + s2);</span><br><span class="line"><span class="keyword">synchronized</span>(s2) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">"...拿到"</span> + s2 + <span class="string">"开吃"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span>(s2) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">"...拿到"</span> + s2 + <span class="string">"等待"</span> + s1);</span><br><span class="line"><span class="keyword">synchronized</span>(s1) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">"...拿到"</span> + s1 + <span class="string">"开吃"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多线程-以前的线程安全的类回顾"><a href="#多线程-以前的线程安全的类回顾" class="headerlink" title="多线程-以前的线程安全的类回顾"></a>多线程-以前的线程安全的类回顾</h3><ul><li>A:回顾以前说过的线程安全问题<ul><li>看源码：Vector,StringBuffer,Hashtable,Collections.synchroinzed(xxx)</li><li>Vector是线程安全的,ArrayList是线程不安全的</li><li>StringBuffer是线程安全的,StringBuilder是线程不安全的</li><li>Hashtable是线程安全的,HashMap是线程不安全的</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;多线程-同步代码块&quot;&gt;&lt;a href=&quot;#多线程-同步代码块&quot; class=&quot;headerlink&quot; title=&quot;多线程-同步代码块&quot;&gt;&lt;/a&gt;多线程-同步代码块&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.什么情况下需要同步&lt;ul&gt;
&lt;li&gt;当多线程并发, 有多段代码同时执行时, 我们希望某一段代码执行的过程中CPU不要切换到其他线程工作. 这时就需要同步.&lt;/li&gt;
&lt;li&gt;如果两段代码是同步的, 那么同一时间只能执行一段, 在一段代码没执行结束之前, 不会执行另外一段代码.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2.同步代码块&lt;ul&gt;
&lt;li&gt;使用synchronized关键字加上一个锁对象来定义一段代码, 这就叫同步代码块&lt;/li&gt;
&lt;li&gt;多个同步代码块如果使用相同的锁对象, 那么他们就是同步的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程语言" scheme="github.com:cnAJun/cnAJun.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>java基础巩固之多线程概念和应用(4)</title>
    <link href="github.com:cnAJun/cnAJun.github.io/2014/12/04/java%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0-4-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>github.com:cnAJun/cnAJun.github.io/2014/12/04/java基础笔记-4-多线程/</id>
    <published>2014-12-03T16:30:00.000Z</published>
    <updated>2018-12-02T17:28:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="多线程-多线程的引入"><a href="#多线程-多线程的引入" class="headerlink" title="多线程-多线程的引入"></a>多线程-多线程的引入</h3><ul><li>1.什么是线程<ul><li>线程是程序执行的一条路径, 一个进程中可以包含多条线程</li><li>多线程并发执行可以提高程序的效率, 可以同时完成多项工作</li></ul></li><li>2.多线程的应用场景<ul><li>红蜘蛛同时共享屏幕给多个电脑</li><li>迅雷开启多条线程一起下载</li><li>QQ同时和多个人一起视频</li><li>服务器同时处理多个客户端请求</li></ul></li></ul><a id="more"></a><h3 id="多线程-多线程并行和并发的区别"><a href="#多线程-多线程并行和并发的区别" class="headerlink" title="多线程-多线程并行和并发的区别"></a>多线程-多线程并行和并发的区别</h3><ul><li>并行就是两个任务同时运行，就是甲任务进行的同时，乙任务也在进行。(需要多核CPU)</li><li>并发是指两个任务都请求运行，而处理器只能按受一个任务，就把这两个任务安排轮流进行，由于时间间隔较短，使人感觉两个任务都在运行。</li><li>比如我跟两个网友聊天，左手操作一个电脑跟甲聊，同时右手用另一台电脑跟乙聊天，这就叫并行。</li><li>如果用一台电脑我先给甲发个消息，然后立刻再给乙发消息，然后再跟甲聊，再跟乙聊。这就叫并发。</li></ul><h3 id="多线程-Java程序运行原理和JVM的启动是多线程的吗"><a href="#多线程-Java程序运行原理和JVM的启动是多线程的吗" class="headerlink" title="多线程-Java程序运行原理和JVM的启动是多线程的吗"></a>多线程-Java程序运行原理和JVM的启动是多线程的吗</h3><ul><li><p>A:Java程序运行原理</p><ul><li>Java命令会启动java虚拟机，启动JVM，等于启动了一个应用程序，也就是启动了一个进程。该进程会自动启动一个 “主线程” ，然后主线程去调用某个类的 main 方法。</li></ul></li><li><p>B:JVM的启动是多线程的吗</p><ul><li>JVM启动至少启动了垃圾回收线程和主线程，所以是多线程的。</li></ul></li></ul><h3 id="多线程-多线程程序实现的方式1"><a href="#多线程-多线程程序实现的方式1" class="headerlink" title="多线程-多线程程序实现的方式1"></a>多线程-多线程程序实现的方式1</h3><ul><li>1.继承Thread<ul><li>定义类继承Thread</li><li>重写run方法</li><li>把新线程要做的事写在run方法中</li><li>创建线程对象</li><li>开启新线程, 内部会自动执行run方法</li><li></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyThread mt = <span class="keyword">new</span> MyThread(); <span class="comment">// 4,创建自定义类的对象</span></span><br><span class="line">mt.start(); <span class="comment">// 5,开启线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3000</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"bb"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123; <span class="comment">// 1,定义类继承Thread</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 2,重写run方法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3000</span>; i++) &#123; <span class="comment">// 3,将要执行的代码,写在run方法中</span></span><br><span class="line">System.out.println(<span class="string">"aaaaaaaaaaaaaaaaaaaaaaaaaaaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多线程-多线程程序实现的方式2"><a href="#多线程-多线程程序实现的方式2" class="headerlink" title="多线程-多线程程序实现的方式2"></a>多线程-多线程程序实现的方式2</h3><ul><li>2.实现Runnable<ul><li>定义类实现Runnable接口</li><li>实现run方法</li><li>把新线程要做的事写在run方法中</li><li>创建自定义的Runnable的子类对象</li><li>创建Thread对象, 传入Runnable</li><li>调用start()开启新线程, 内部会自动调用Runnable的run()方法</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3_Runnable</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyRunnable mr = <span class="keyword">new</span> MyRunnable(); <span class="comment">// 4,创建自定义类对象</span></span><br><span class="line"><span class="comment">// Runnable target = new MyRunnable();</span></span><br><span class="line">Thread t = <span class="keyword">new</span> Thread(mr); <span class="comment">// 5,将其当作参数传递给Thread的构造函数</span></span><br><span class="line">t.start(); <span class="comment">// 6,开启线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3000</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"bb"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123; <span class="comment">// 1,自定义类实现Runnable接口</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 2,重写run方法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3000</span>; i++) &#123; <span class="comment">// 3,将要执行的代码,写在run方法中</span></span><br><span class="line">System.out.println(<span class="string">"aaaaaaaaaaaaaaaaaaaaaaaaaaaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多线程-实现Runnable的原理"><a href="#多线程-实现Runnable的原理" class="headerlink" title="多线程-实现Runnable的原理"></a>多线程-实现Runnable的原理</h3><ul><li>查看源码<ul><li>1,看Thread类的构造函数,传递了Runnable接口的引用 </li><li>2,通过init()方法找到传递的target给成员变量的target赋值</li><li>3,查看run方法,发现run方法中有判断,如果target不为null就会调用Runnable接口子类对象的run方法</li></ul></li></ul><h3 id="多线程-两种方式的区别"><a href="#多线程-两种方式的区别" class="headerlink" title="多线程-两种方式的区别"></a>多线程-两种方式的区别</h3><ul><li><p>查看源码的区别:</p><ul><li>a.继承Thread : 由于子类重写了Thread类的run(), 当调用start()时, 直接找子类的run()方法</li><li>b.实现Runnable : 构造函数中传入了Runnable的引用, 成员变量记住了它, start()调用run()方法时内部判断成员变量Runnable的引用是否为空, 不为空编译时看的是Runnable的run(),运行时执行的是子类的run()方法</li></ul></li><li><p>继承Thread</p><ul><li>好处是:可以直接使用Thread类中的方法,代码简单</li><li>弊端是:如果已经有了父类,就不能用这种方法</li></ul></li><li>实现Runnable接口<ul><li>好处是:即使自己定义的线程类有了父类也没关系,因为有了父类也可以实现接口,而且接口是可以多实现的</li><li>弊端是:不能直接使用Thread中的方法需要先获取到线程对象后,才能得到Thread的方法,代码复杂<h3 id="多线程-匿名内部类实现线程的两种方式"><a href="#多线程-匿名内部类实现线程的两种方式" class="headerlink" title="多线程-匿名内部类实现线程的两种方式"></a>多线程-匿名内部类实现线程的两种方式</h3></li></ul></li><li>继承Thread类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Thread() &#123; <span class="comment">// 1,new 类()&#123;&#125;继承这个类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 2,重写run方法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3000</span>; i++) &#123; <span class="comment">// 3,将要执行的代码,写在run方法中</span></span><br><span class="line">System.out.println(<span class="string">"aaaaaaaaaaaaaaaaaaaaaaaaaaaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"><span class="comment">// 实现Runnable接口</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123; <span class="comment">// 1,new 接口()&#123;&#125;实现这个接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 2,重写run方法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3000</span>; i++) &#123; <span class="comment">// 3,将要执行的代码,写在run方法中</span></span><br><span class="line">System.out.println(<span class="string">"bb"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多线程-获取名字和设置名字"><a href="#多线程-获取名字和设置名字" class="headerlink" title="多线程-获取名字和设置名字"></a>多线程-获取名字和设置名字</h3><ul><li>1.获取名字<ul><li>通过getName()方法获取线程对象的名字</li></ul></li><li>2.设置名字<ul><li>通过构造函数可以传入String类型的名字</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="string">"xxx"</span>) &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="keyword">this</span>.getName() + <span class="string">"....aaaaaaaaaaaaaaaaaaaaaaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="string">"yyy"</span>) &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="keyword">this</span>.getName() + <span class="string">"....bb"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 通过setName(String)方法可以设置线程对象的名字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="keyword">this</span>.getName() + <span class="string">"....aaaaaaaaaaaaaaaaaaaaaaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="keyword">this</span>.getName() + <span class="string">"....bb"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">t1.setName(<span class="string">"芙蓉姐姐"</span>);</span><br><span class="line">t2.setName(<span class="string">"凤姐"</span>);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多线程-获取当前线程的对象"><a href="#多线程-获取当前线程的对象" class="headerlink" title="多线程-获取当前线程的对象"></a>多线程-获取当前线程的对象</h3><ul><li>Thread.currentThread(), 主线程也可以获取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">"...aaaaaaaaaaaaaaaaaaaaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">"...bb"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">Thread.currentThread().setName(<span class="string">"我是主线程"</span>);<span class="comment">//获取主函数线程的引用,并改名字</span></span><br><span class="line">System.out.println(Thread.currentThread().getName());<span class="comment">//获取主函数线程的引用,并获取名字</span></span><br></pre></td></tr></table></figure><h3 id="多线程-休眠线程"><a href="#多线程-休眠线程" class="headerlink" title="多线程-休眠线程"></a>多线程-休眠线程</h3><ul><li>Thread.sleep(毫秒,纳秒), 控制当前线程休眠若干毫秒1秒= 1000毫秒 1秒 = 1000 <em> 1000 </em> 1000纳秒 1000000000</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">"...aaaaaaaaaaaaaaaaaaaaaa"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">"...bb"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br></pre></td></tr></table></figure><h3 id="多线程-守护线程"><a href="#多线程-守护线程" class="headerlink" title="多线程-守护线程"></a>多线程-守护线程</h3><ul><li>setDaemon(), 设置一个线程为守护线程, 该线程不会单独执行, 当其他非守护线程都执行结束后, 自动退出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">Thread t1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">"...aaaaaaaaaaaaaaaaaaaaaa"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">"...bb"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">t1.setDaemon(<span class="keyword">true</span>);<span class="comment">//将t1设置为守护线程</span></span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">### 多线程-加入线程</span><br><span class="line">* join(), 当前线程暂停, 等待指定的线程执行结束后, 当前线程再继续</span><br><span class="line">* join(<span class="keyword">int</span>), 可以等待指定的毫秒之后继续</span><br><span class="line">* </span><br><span class="line"><span class="keyword">final</span> Thread t1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">"...aaaaaaaaaaaaaaaaaaaaaa"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//t1.join();//插队,加入</span></span><br><span class="line">t1.join(<span class="number">30</span>);<span class="comment">//加入,有固定的时间,过了固定时间,继续交替执行</span></span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(getName() + <span class="string">"...bb"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure><h3 id="多线程-礼让线程"><a href="#多线程-礼让线程" class="headerlink" title="多线程-礼让线程"></a>多线程-礼让线程</h3><ul><li>yield让出cpu</li></ul><h3 id="多线程-设置线程的优先级"><a href="#多线程-设置线程的优先级" class="headerlink" title="多线程-设置线程的优先级"></a>多线程-设置线程的优先级</h3><ul><li>setPriority()设置线程的优先级</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;多线程-多线程的引入&quot;&gt;&lt;a href=&quot;#多线程-多线程的引入&quot; class=&quot;headerlink&quot; title=&quot;多线程-多线程的引入&quot;&gt;&lt;/a&gt;多线程-多线程的引入&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.什么是线程&lt;ul&gt;
&lt;li&gt;线程是程序执行的一条路径, 一个进程中可以包含多条线程&lt;/li&gt;
&lt;li&gt;多线程并发执行可以提高程序的效率, 可以同时完成多项工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2.多线程的应用场景&lt;ul&gt;
&lt;li&gt;红蜘蛛同时共享屏幕给多个电脑&lt;/li&gt;
&lt;li&gt;迅雷开启多条线程一起下载&lt;/li&gt;
&lt;li&gt;QQ同时和多个人一起视频&lt;/li&gt;
&lt;li&gt;服务器同时处理多个客户端请求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程语言" scheme="github.com:cnAJun/cnAJun.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="多线程" scheme="github.com:cnAJun/cnAJun.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java基础巩固之设计模式(3)</title>
    <link href="github.com:cnAJun/cnAJun.github.io/2014/12/03/Java%E5%9F%BA%E7%A1%80%E5%B7%A9%E5%9B%BA%E4%B9%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-3/"/>
    <id>github.com:cnAJun/cnAJun.github.io/2014/12/03/Java基础巩固之设计模式-3/</id>
    <published>2014-12-03T15:59:00.000Z</published>
    <updated>2018-12-02T17:29:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设计模式-模版-Template-设计模式概述和使用"><a href="#设计模式-模版-Template-设计模式概述和使用" class="headerlink" title="设计模式-模版(Template)设计模式概述和使用"></a>设计模式-模版(Template)设计模式概述和使用</h3><ul><li>A:模版设计模式概述<ul><li>模版方法模式就是定义一个算法的骨架，而将具体的算法延迟到子类中来实现</li></ul></li><li>B:优点和缺点<ul><li>a:优点<ul><li>使用模版方法模式，在定义算法骨架的同时，可以很灵活的实现具体的算法，满足用户灵活多变的需求</li></ul></li><li>b:缺点<ul><li>如果算法骨架有修改的话，则需要修改抽象类</li></ul></li></ul></li></ul><a id="more"></a><p>1,装饰<br>2,单例</p><h3 id="多线程-单例"><a href="#多线程-单例" class="headerlink" title="多线程-单例"></a>多线程-单例</h3><ul><li><p>单例设计模式：保证类在内存中只有一个对象。</p></li><li><p>如何保证类在内存中只有一个对象呢？</p><ul><li>(1)控制类的创建，不让其他类来创建本类的对象。private</li><li>(2)在本类中定义一个本类的对象。Singleton s;</li><li>(3)提供公共的访问方式。  public static Singleton getInstance(){return s}<!-- more --></li></ul></li><li>单例写法两种：<ul><li>(1)饿汉式 开发用这种方式。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="comment">//1,私有构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//2,创建本类对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton s = <span class="keyword">new</span> Singleton();</span><br><span class="line"><span class="comment">//3,对外提供公共的访问方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"11111111111"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>(2)懒汉式 面试写这种方式。多线程的问题？</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//懒汉式,单例的延迟加载模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="comment">//1,私有构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//2,声明一个本类的引用</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton s;</span><br><span class="line"><span class="comment">//3,对外提供公共的访问方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="keyword">null</span>)</span><br><span class="line"><span class="comment">//线程1,线程2</span></span><br><span class="line">s = <span class="keyword">new</span> Singleton();</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"11111111111"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>(3)第三种格式<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton s = <span class="keyword">new</span> Singleton();<span class="comment">//final是最终的意思,被final修饰的变量不可以被更改</span></span><br><span class="line">&#125;</span><br><span class="line">###25.02_多线程(Runtime类)</span><br><span class="line">* Runtime类是一个单例类</span><br><span class="line">* </span><br><span class="line">Runtime r = Runtime.getRuntime();</span><br><span class="line"><span class="comment">//r.exec("shutdown -s -t 300");//300秒后关机</span></span><br><span class="line">r.exec(<span class="string">"shutdown -a"</span>);<span class="comment">//取消关机</span></span><br></pre></td></tr></table></figure></li></ul><p>3,简单工厂<br>4,工厂方法</p><h3 id="设计模式-工厂方法模式的概述和使用"><a href="#设计模式-工厂方法模式的概述和使用" class="headerlink" title="设计模式-工厂方法模式的概述和使用"></a>设计模式-工厂方法模式的概述和使用</h3><ul><li>A:工厂方法模式概述<ul><li>工厂方法模式中抽象工厂类负责定义创建对象的接口，具体对象的创建工作由继承抽象工厂的具体类实现。</li></ul></li><li>B:优点<ul><li>客户端不需要在负责对象的创建，从而明确了各个类的职责，如果有新的对象增加，只需要增加一个具体的类和具体的工厂类即可，不影响已有的代码，后期维护容易，增强了系统的扩展性</li></ul></li><li>C:缺点<ul><li>需要额外的编写代码，增加了工作量</li></ul></li><li>D:案例演示</li><li><pre><code>动物抽象类：public abstract Animal { public abstract void eat(); }工厂接口：public interface Factory {public abstract Animal createAnimal();}具体狗类：public class Dog extends Animal {}具体猫类：public class Cat extends Animal {}开始，在测试类中每个具体的内容自己创建对象，但是，创建对象的工作如果比较麻烦，就需要有人专门做这个事情，所以就知道了一个专门的类来创建对象。发现每次修改代码太麻烦，用工厂方法改进，针对每一个具体的实现提供一个具体工厂。狗工厂：public class DogFactory implements Factory {    public Animal createAnimal() {…}        }猫工厂：public class CatFactory implements Factory {    public Animal createAnimal() {…}        }  </code></pre></li></ul><p>5,适配器<br>6,模版</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;设计模式-模版-Template-设计模式概述和使用&quot;&gt;&lt;a href=&quot;#设计模式-模版-Template-设计模式概述和使用&quot; class=&quot;headerlink&quot; title=&quot;设计模式-模版(Template)设计模式概述和使用&quot;&gt;&lt;/a&gt;设计模式-模版(Template)设计模式概述和使用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A:模版设计模式概述&lt;ul&gt;
&lt;li&gt;模版方法模式就是定义一个算法的骨架，而将具体的算法延迟到子类中来实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;B:优点和缺点&lt;ul&gt;
&lt;li&gt;a:优点&lt;ul&gt;
&lt;li&gt;使用模版方法模式，在定义算法骨架的同时，可以很灵活的实现具体的算法，满足用户灵活多变的需求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;b:缺点&lt;ul&gt;
&lt;li&gt;如果算法骨架有修改的话，则需要修改抽象类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程语言" scheme="github.com:cnAJun/cnAJun.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="JAVA" scheme="github.com:cnAJun/cnAJun.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>java基础巩固之代理(2)</title>
    <link href="github.com:cnAJun/cnAJun.github.io/2014/12/03/Java%E5%9F%BA%E7%A1%80%E5%B7%A9%E5%9B%BA%E4%B9%8B%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86-2/"/>
    <id>github.com:cnAJun/cnAJun.github.io/2014/12/03/Java基础巩固之动态代理-2/</id>
    <published>2014-12-03T15:53:00.000Z</published>
    <updated>2018-12-03T06:37:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是代理？"><a href="#什么是代理？" class="headerlink" title="什么是代理？"></a>什么是代理？</h3><p>代理(Proxy)是一种设计模式,提供了对目标对象另外的访问方式;即通过代理对象访问目标对象.这样做的好处是:可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能.<br>这里使用到编程中的一个思想:不要随意去修改别人已经写好的代码或者方法,如果需改修改,可以通过代理的方式来扩展该方法</p><p>现实生活中例子就是老板与管理之间的关系,他只要负责公司的大方向,而其他的事情就交给他的代理人(管理)来解决.这就是代理思想在现实中的一个例子<br><a id="more"></a><br><img src="/images/daili.png" alt="Alt text"></p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><ul><li>在使用时,需要定义接口或者父类</li><li>被代理对象与代理对象一起实现相同的接口或者是继承相同父类</li><li><p>举个例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口实现</span></span><br><span class="line"><span class="comment"> * 目标对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----UserDao 输出!----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建静态代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理对象,静态代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticUserDaoProxy</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//接收保存目标对象</span></span><br><span class="line">    <span class="keyword">private</span> IUserDao target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StaticUserDaoProxy</span><span class="params">(IUserDao target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before StaticUserDaoProxy..."</span>);</span><br><span class="line">        target.save();<span class="comment">//执行目标对象的方法</span></span><br><span class="line">        System.out.println(<span class="string">"after StaticUserDaoProxy..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UserDao target = <span class="keyword">new</span> UserDao();</span><br><span class="line">        <span class="comment">//静态代理</span></span><br><span class="line">        StaticUserDaoProxy staticUserDaoProxy = <span class="keyword">new</span> StaticUserDaoProxy(target);</span><br><span class="line">        staticUserDaoProxy.save();</span><br></pre></td></tr></table></figure></li><li><p>静态代理缺点: </p></li><li>因为代理对象需要与目标对象实现一样的接口,所以会有很多代理类,类太多.同时,一旦接口增加方法,目标对象与代理对象都要维护.</li></ul><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><ul><li>动态代理对象特点:<ul><li>代理对象,不需要实现接口</li><li>代理对象的生成,是利用JDK的API,动态的在内存中构建代理对象(需要我们指定创建代理对象/目标对象实现的接口的类型)</li><li>动态代理也叫做:JDK代理,接口代理s</li></ul></li><li><p>JDK实现代理只需要使用newProxyInstance方法,但是该方法需要接收三个参数,完整的写法是:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newProxyInstance(ClassLoader loader, Class&lt;&gt;[] interfaces,InvocationHandler h )</span><br></pre></td></tr></table></figure></li><li><p>newProxyInstance方法用来返回一个代理对象，这个方法总共有3个参数，ClassLoader loader用来指明生成代理对象使用哪个类装载器，Class&lt;？&gt;[] interfaces用来指明生成哪个对象的代理对象，通过接口指定，InvocationHandler h用来指明产生的这个代理对象要做什么事情。所以我们只需要调用newProxyInstance方法就可以得到某一个对象的代理对象了。</p></li><li><p>创建JDK代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK 代理对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JDKProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//维护一个目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JDKProxyFactory</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给目标对象生成代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"before JDKProxyFactory"</span>);</span><br><span class="line">                        <span class="comment">//执行目标对象方法</span></span><br><span class="line">                        Object returnValue = method.invoke(target, args);</span><br><span class="line">                        System.out.println(<span class="string">"after JDKProxyFactory"</span>);</span><br><span class="line">                        <span class="keyword">return</span> returnValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">//jdk动态代理</span></span><br><span class="line">        JDKProxyFactory jdkProxyFactory = <span class="keyword">new</span> JDKProxyFactory(target);</span><br><span class="line">        IUserDao iTarget = (IUserDao) jdkProxyFactory.getProxyInstance();</span><br><span class="line">         iTarget.save();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注意,只能返回接口而不是具体实现类,否让报如下错误</span></span><br><span class="line">        <span class="comment">// java.lang.ClassCastException: XXXX.$Proxy0 cannot be cast to XXXX.UserDao</span></span><br><span class="line"><span class="comment">//        UserDao dao = (UserDao) jdkProxyFactory.getProxyInstance();</span></span><br></pre></td></tr></table></figure></li><li><p>JDK动态代理局限性</p></li><li><p>通过反射类Proxy和InvocationHandler回调接口实现的jdk动态代理，要求委托类必须实现一个接口，但事实上并不是所有类都有接口，对于没有实现接口的类，便无法使用该方方式实现动态代理。</p></li></ul><h3 id="Cglib动态代理"><a href="#Cglib动态代理" class="headerlink" title="Cglib动态代理"></a>Cglib动态代理</h3><ul><li>上面的静态代理和动态代理模式都是要求目标对象是实现一个接口的目标对象, </li><li>Cglib代理,也叫作子类代理,是基于asm框架，实现了无反射机制进行代理，利用空间来换取了时间，代理效率高于jdk ,它是在内存中构建一个子类对象从而实现对目标对象功能的扩展. </li><li><p>它有如下特点:</p><ul><li>JDK的动态代理有一个限制,就是使用动态代理的对象必须实现一个或多个接口,如果想代理没有实现接口的类,就可以使用Cglib实现.</li><li>Cglib是一个强大的高性能的代码生成包,它可以在运行期扩展java类与实现java接口.它广泛的被许多AOP的框架使用,例如Spring AOP和synaop,为他们提供方法的interception(拦截)</li><li>Cglib包的底层是通过使用一个小而块的字节码处理框架ASM来转换字节码并生成新的类.不鼓励直接使用ASM,因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉.</li><li>注意</li><li>需要引入cglib的jar文件,但是Spring的核心包中已经包括了Cglib功能,所以直接引入pring-core-3.2.5.jar即可.</li><li>引入功能包后,就可以在内存中动态构建子类</li><li>代理的类不能为final,否则报错</li><li>目标对象的方法如果为final/static,那么就不会被拦截,即不会执行目标对象额外的业务方法.</li></ul></li><li><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDaoWithoutInterFace</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----UserDaoWithoutInterFace 输出!----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CGlibProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//维护目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CGlibProxyFactory</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给目标对象创建一个代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.工具类</span></span><br><span class="line">        Enhancer en = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//2.设置父类</span></span><br><span class="line">        en.setSuperclass(target.getClass());</span><br><span class="line">        <span class="comment">//3.设置回调函数</span></span><br><span class="line">        en.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//4.创建子类(代理对象)</span></span><br><span class="line">        <span class="keyword">return</span> en.create();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before CGlibProxyFactory..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行目标对象的方法</span></span><br><span class="line">        Object returnValue = method.invoke(target, args);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"after CGlibProxyFactory..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UserDaoWithoutInterFace target2 = <span class="keyword">new</span> UserDaoWithoutInterFace();</span><br><span class="line">        CGlibProxyFactory cGlibProxyFactory = <span class="keyword">new</span> CGlibProxyFactory(target2);</span><br><span class="line">        UserDaoWithoutInterFace dao = (UserDaoWithoutInterFace) cGlibProxyFactory.getProxyInstance();</span><br><span class="line">        dao.save();</span><br></pre></td></tr></table></figure></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>使用CGLIB即使代理类没有实现任何接口也可以实现动态代理功能。CGLIB具有简单易用，它的运行速度要远远快于JDK的 </li><li>CGLIB的核心类： </li><li>net.sf.cglib.proxy.Enhancer – 主要的增强类 </li><li>net.sf.cglib.proxy.MethodInterceptor – 主要的方法拦截类，它是Callback接口的子接口，需要用户实现 </li><li>net.sf.cglib.proxy.MethodProxy – JDK的java.lang.reflect.Method类的代理类，可以方便的实现对源对象方法的调用,</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是代理？&quot;&gt;&lt;a href=&quot;#什么是代理？&quot; class=&quot;headerlink&quot; title=&quot;什么是代理？&quot;&gt;&lt;/a&gt;什么是代理？&lt;/h3&gt;&lt;p&gt;代理(Proxy)是一种设计模式,提供了对目标对象另外的访问方式;即通过代理对象访问目标对象.这样做的好处是:可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能.&lt;br&gt;这里使用到编程中的一个思想:不要随意去修改别人已经写好的代码或者方法,如果需改修改,可以通过代理的方式来扩展该方法&lt;/p&gt;
&lt;p&gt;现实生活中例子就是老板与管理之间的关系,他只要负责公司的大方向,而其他的事情就交给他的代理人(管理)来解决.这就是代理思想在现实中的一个例子&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="github.com:cnAJun/cnAJun.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="JAVA" scheme="github.com:cnAJun/cnAJun.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>java基础巩固之类加载器(3)</title>
    <link href="github.com:cnAJun/cnAJun.github.io/2014/12/03/java%E5%9F%BA%E7%A1%80%E5%B7%A9%E5%9B%BA%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8-2/"/>
    <id>github.com:cnAJun/cnAJun.github.io/2014/12/03/java基础巩固之类加载器-2/</id>
    <published>2014-12-03T06:29:00.000Z</published>
    <updated>2018-12-03T06:54:14.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>类加载器是 Java 语言的一个创新，也是 Java 语言流行的重要原因之一。它使得 Java 类可以被动态加载到 Java 虚拟机中并执行。类加载器从 JDK 1.0 就出现了，最初是为了满足 Java Applet 的需要而开发出来的。Java Applet 需要从远程下载 Java 类文件到浏览器中并执行。现在类加载器在 Web 容器和 OSGi 中得到了广泛的使用。一般来说，Java 应用的开发人员不需要直接同类加载器进行交互。Java 虚拟机默认的行为就已经足够满足大多数情况的需求了。不过如果遇到了需要与类加载器进行交互的情况，而对类加载器的机制又不是很了解的话，就很容易花大量的时间去调试 ClassNotFoundException和 NoClassDefFoundError等异常。本文将详细介绍 Java 的类加载器，帮助读者深刻理解 Java 语言中的这个重要概念。下面首先介绍一些相关的基本概念。</li></ul><h3 id="类加载器基本概念"><a href="#类加载器基本概念" class="headerlink" title="类加载器基本概念"></a>类加载器基本概念</h3><ul><li><p>顾名思义，类加载器（class loader）用来加载 Java 类到 Java 虚拟机中。一般来说，Java 虚拟机使用 Java 类的方式如下：Java 源程序（.java 文件）在经过 Java 编译器编译之后就被转换成 Java 字节代码（.class 文件）。类加载器负责读取 Java 字节代码，并转换成 java.lang.Class类的一个实例。每个这样的实例用来表示一个 Java 类。通过此实例的 newInstance()方法就可以创建出该类的一个对象。实际的情况可能更加复杂，比如 Java 字节代码可能是通过工具动态生成的，也可能是通过网络下载的。</p></li><li><p>基本上所有的类加载器都是 java.lang.ClassLoader类的一个实例。下面详细介绍这个 Java 类。</p></li><li><p>java.lang.ClassLoader类介绍</p></li><li><p>java.lang.ClassLoader类的基本职责就是根据一个指定的类的名称，找到或者生成其对应的字节代码，然后从这些字节代码中定义出一个 Java 类，即 java.lang.Class类的一个实例。除此之外，ClassLoader还负责加载 Java 应用所需的资源，如图像文件和配置文件等。不过本文只讨论其加载类的功能。为了完成加载类的这个职责，ClassLoader提供了一系列的方法，比较重要的方法如 表 1所示。关于这些方法的细节会在下面进行介绍。</p></li><li><p>表 1. ClassLoader 中与加载类相关的方法</p></li><li>方法    说明</li><li>getParent()    返回该类加载器的父类加载器。</li><li>loadClass(String name)    加载名称为 name的类，返回的结果是 java.lang.Class类的实例。</li><li>findClass(String name)    查找名称为 name的类，返回的结果是 java.lang.Class类的实例。</li><li>findLoadedClass(String name)    查找名称为 name的已经被加载过的类，返回的结果是 java.lang.Class类的实例。</li><li>defineClass(String name, byte[] b, int off, int len)    把字节数组 b中的内容转换成 Java 类，返回的结果是 java.lang.Class类的实例。这个方法被声明为 final的。</li><li>resolveClass(Class&lt;?&gt; c)    链接指定的 Java 类。</li><li>对于 表 1中给出的方法，表示类名称的 name参数的值是类的二进制名称。需要注意的是内部类的表示，如com.example.Sample$1和 com.example.Sample$Inner等表示方式。这些方法会在下面介绍类加载器的工作机制时，做进一步的说明。下面介绍类加载器的树状组织结构。</li></ul><h3 id="类加载器的树状组织结构"><a href="#类加载器的树状组织结构" class="headerlink" title="类加载器的树状组织结构"></a>类加载器的树状组织结构</h3><ul><li><p>Java 中的类加载器大致可以分成两类，一类是系统提供的，另外一类则是由 Java 应用开发人员编写的。系统提供的类加载器主要有下面三个：</p></li><li><p>引导类加载器（bootstrap class loader）：它用来加载 Java 的核心库，是用原生代码来实现的，并不继承自java.lang.ClassLoader。</p></li><li>扩展类加载器（extensions class loader）：它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。</li><li>系统类加载器（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader()来获取它。</li><li><p>除了系统提供的类加载器以外，开发人员可以通过继承 java.lang.ClassLoader类的方式实现自己的类加载器，以满足一些特殊的需求。</p></li><li><p>除了引导类加载器之外，所有的类加载器都有一个父类加载器。通过 表 1中给出的 getParent()方法可以得到。对于系统提供的类加载器来说，系统类加载器的父类加载器是扩展类加载器，而扩展类加载器的父类加载器是引导类加载器；对于开发人员编写的类加载器来说，其父类加载器是加载此类加载器 Java 类的类加载器。因为类加载器 Java 类如同其它的 Java 类一样，也是要由类加载器来加载的。一般来说，开发人员编写的类加载器的父类加载器是系统类加载器。类加载器通过这种方式组织起来，形成树状结构。树的根节点就是引导类加载器。图 1中给出了一个典型的类加载器树状组织结构示意图，其中的箭头指向的是父类加载器。</p></li><li><p>图 1. 类加载器树状组织结构示意图<br><img src="/images/leijiazai.jpg" alt=""></p></li><li><p>代码清单 1演示了类加载器的树状组织结构。</p></li><li><p>清单 1. 演示类加载器的树状组织结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTree</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">       ClassLoader loader = ClassLoaderTree.class.getClassLoader(); </span><br><span class="line">       <span class="keyword">while</span> (loader != <span class="keyword">null</span>) &#123; </span><br><span class="line">           System.out.println(loader.toString()); </span><br><span class="line">           loader = loader.getParent(); </span><br><span class="line">       &#125; </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>每个 Java 类都维护着一个指向定义它的类加载器的引用，通过 getClassLoader()方法就可以获取到此引用。代码清单 1中通过递归调用 getParent()方法来输出全部的父类加载器。代码清单 1的运行结果如 代码清单 2所示。</p></li><li><p>清单 2. 演示类加载器的树状组织结构的运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sun.misc.Launcher$AppClassLoader@<span class="number">9304</span>b1 </span><br><span class="line">sun.misc.Launcher$ExtClassLoader@<span class="number">190</span>d11</span><br></pre></td></tr></table></figure></li><li><p>如 代码清单 2所示，第一个输出的是 ClassLoaderTree类的类加载器，即系统类加载器。它是sun.misc.Launcher$AppClassLoader类的实例；第二个输出的是扩展类加载器，是 sun.misc.Launcher$ExtClassLoader类的实例。需要注意的是这里并没有输出引导类加载器，这是由于有些 JDK 的实现对于父类加载器是引导类加载器的情况，getParent()方法返回 null。</p></li><li><p>在了解了类加载器的树状组织结构之后，下面介绍类加载器的代理模式。</p></li></ul><h3 id="类加载器的代理模式"><a href="#类加载器的代理模式" class="headerlink" title="类加载器的代理模式"></a>类加载器的代理模式</h3><ul><li><p>类加载器在尝试自己去查找某个类的字节代码并定义它时，会先代理给其父类加载器，由父类加载器先去尝试加载这个类，依次类推。在介绍代理模式背后的动机之前，首先需要说明一下 Java 虚拟机是如何判定两个 Java 类是相同的。Java 虚拟机不仅要看类的全名是否相同，还要看加载此类的类加载器是否一样。只有两者都相同的情况，才认为两个类是相同的。即便是同样的字节代码，被不同的类加载器加载之后所得到的类，也是不同的。比如一个 Java 类com.example.Sample，编译之后生成了字节代码文件 Sample.class。两个不同的类加载器 ClassLoaderA和ClassLoaderB分别读取了这个 Sample.class文件，并定义出两个 java.lang.Class类的实例来表示这个类。这两个实例是不相同的。对于 Java 虚拟机来说，它们是不同的类。试图对这两个类的对象进行相互赋值，会抛出运行时异常ClassCastException。下面通过示例来具体说明。代码清单 3中给出了 Java 类 com.example.Sample。</p></li><li><p>清单 3. com.example.Sample 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sample</span> </span>&#123; </span><br><span class="line">   <span class="keyword">private</span> Sample instance; </span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSample</span><span class="params">(Object instance)</span> </span>&#123; </span><br><span class="line">       <span class="keyword">this</span>.instance = (Sample) instance; </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如 代码清单 3所示，com.example.Sample类的方法 setSample接受一个 java.lang.Object类型的参数，并且会把该参数强制转换成 com.example.Sample类型。测试 Java 类是否相同的代码如 代码清单 4所示。</p></li><li><p>清单 4. 测试 Java 类是否相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testClassIdentity</span><span class="params">()</span> </span>&#123; </span><br><span class="line">   String classDataRootPath = <span class="string">"C:\\workspace\\Classloader\\classData"</span>; </span><br><span class="line">   FileSystemClassLoader fscl1 = <span class="keyword">new</span> FileSystemClassLoader(classDataRootPath); </span><br><span class="line">   FileSystemClassLoader fscl2 = <span class="keyword">new</span> FileSystemClassLoader(classDataRootPath); </span><br><span class="line">   String className = <span class="string">"com.example.Sample"</span>; </span><br><span class="line">   <span class="keyword">try</span> &#123; </span><br><span class="line">       Class&lt;?&gt; class1 = fscl1.loadClass(className); </span><br><span class="line">       Object obj1 = class1.newInstance(); </span><br><span class="line">       Class&lt;?&gt; class2 = fscl2.loadClass(className); </span><br><span class="line">       Object obj2 = class2.newInstance(); </span><br><span class="line">       Method setSampleMethod = class1.getMethod(<span class="string">"setSample"</span>, java.lang.Object.class); </span><br><span class="line">       setSampleMethod.invoke(obj1, obj2); </span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">       e.printStackTrace(); </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代码清单 4中使用了类 FileSystemClassLoader的两个不同实例来分别加载类 com.example.Sample，得到了两个不同的java.lang.Class的实例，接着通过 newInstance()方法分别生成了两个类的对象 obj1和 obj2，最后通过 Java 的反射 API 在对象 obj1上调用方法 setSample，试图把对象 obj2赋值给 obj1内部的 instance对象。代码清单 4的运行结果如 代码清单 5所示。</p></li><li><p>清单 5. 测试 Java 类是否相同的运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">java.lang.reflect.InvocationTargetException </span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) </span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">39</span>) </span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">25</span>)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">597</span>) </span><br><span class="line">at classloader.ClassIdentity.testClassIdentity(ClassIdentity.java:<span class="number">26</span>) </span><br><span class="line">at classloader.ClassIdentity.main(ClassIdentity.java:<span class="number">9</span>) </span><br><span class="line">Caused by: java.lang.ClassCastException: com.example.Sample </span><br><span class="line">cannot be cast to com.example.Sample </span><br><span class="line">at com.example.Sample.setSample(Sample.java:<span class="number">7</span>) </span><br><span class="line">... <span class="number">6</span> more</span><br></pre></td></tr></table></figure></li><li><p>从 代码清单 5给出的运行结果可以看到，运行时抛出了 java.lang.ClassCastException异常。虽然两个对象 obj1和obj2的类的名字相同，但是这两个类是由不同的类加载器实例来加载的，因此不被 Java 虚拟机认为是相同的。</p></li><li><p>了解了这一点之后，就可以理解代理模式的设计动机了。代理模式是为了保证 Java 核心库的类型安全。所有 Java 应用都至少需要引用 java.lang.Object类，也就是说在运行的时候，java.lang.Object这个类需要被加载到 Java 虚拟机中。如果这个加载过程由 Java 应用自己的类加载器来完成的话，很可能就存在多个版本的 java.lang.Object类，而且这些类之间是不兼容的。通过代理模式，对于 Java 核心库的类的加载工作由引导类加载器来统一完成，保证了 Java 应用所使用的都是同一个版本的 Java 核心库的类，是互相兼容的。</p></li><li><p>不同的类加载器为相同名称的类创建了额外的名称空间。相同名称的类可以并存在 Java 虚拟机中，只需要用不同的类加载器来加载它们即可。不同类加载器加载的类之间是不兼容的，这就相当于在 Java 虚拟机内部创建了一个个相互隔离的 Java 类空间。这种技术在许多框架中都被用到，后面会详细介绍。</p></li><li><p>下面具体介绍类加载器加载类的详细过程。</p></li></ul><h3 id="加载类的过程"><a href="#加载类的过程" class="headerlink" title="加载类的过程"></a>加载类的过程</h3><ul><li><p>在前面介绍类加载器的代理模式的时候，提到过类加载器会首先代理给其它类加载器来尝试加载某个类。这就意味着真正完成类的加载工作的类加载器和启动这个加载过程的类加载器，有可能不是同一个。真正完成类的加载工作是通过调用 defineClass来实现的；而启动类的加载过程是通过调用 loadClass来实现的。前者称为一个类的定义加载器（defining loader），后者称为初始加载器（initiating loader）。在 Java 虚拟机判断两个类是否相同的时候，使用的是类的定义加载器。也就是说，哪个类加载器启动类的加载过程并不重要，重要的是最终定义这个类的加载器。两种类加载器的关联之处在于：一个类的定义加载器是它引用的其它类的初始加载器。如类 com.example.Outer引用了类com.example.Inner，则由类 com.example.Outer的定义加载器负责启动类 com.example.Inner的加载过程。</p></li><li><p>方法 loadClass()抛出的是 java.lang.ClassNotFoundException异常；方法 defineClass()抛出的是java.lang.NoClassDefFoundError异常。</p></li><li><p>类加载器在成功加载某个类之后，会把得到的 java.lang.Class类的实例缓存起来。下次再请求加载该类的时候，类加载器会直接使用缓存的类的实例，而不会尝试再次加载。也就是说，对于一个类加载器实例来说，相同全名的类只加载一次，即 loadClass方法不会被重复调用。</p></li><li><p>下面讨论另外一种类加载器：线程上下文类加载器。</p></li></ul><h3 id="线程上下文类加载器"><a href="#线程上下文类加载器" class="headerlink" title="线程上下文类加载器"></a>线程上下文类加载器</h3><ul><li><p>线程上下文类加载器（context class loader）是从 JDK 1.2 开始引入的。类 java.lang.Thread中的方法getContextClassLoader()和 setContextClassLoader(ClassLoader cl)用来获取和设置线程的上下文类加载器。如果没有通过 setContextClassLoader(ClassLoader cl)方法进行设置的话，线程将继承其父线程的上下文类加载器。Java 应用运行的初始线程的上下文类加载器是系统类加载器。在线程中运行的代码可以通过此类加载器来加载类和资源。</p></li><li><p>前面提到的类加载器的代理模式并不能解决 Java 应用开发中会遇到的类加载器的全部问题。Java 提供了很多服务提供者接口（Service Provider Interface，SPI），允许第三方为这些接口提供实现。常见的 SPI 有 JDBC、JCE、JNDI、JAXP 和 JBI 等。这些 SPI 的接口由 Java 核心库来提供，如 JAXP 的 SPI 接口定义包含在 javax.xml.parsers包中。这些 SPI 的实现代码很可能是作为 Java 应用所依赖的 jar 包被包含进来，可以通过类路径（CLASSPATH）来找到，如实现了 JAXP SPI 的 Apache Xerces所包含的 jar 包。SPI 接口中的代码经常需要加载具体的实现类。如 JAXP 中的 javax.xml.parsers.DocumentBuilderFactory类中的 newInstance()方法用来生成一个新的DocumentBuilderFactory的实例。这里的实例的真正的类是继承自 javax.xml.parsers.DocumentBuilderFactory，由 SPI 的实现所提供的。如在 Apache Xerces 中，实现的类是 org.apache.xerces.jaxp.DocumentBuilderFactoryImpl。而问题在于，SPI 的接口是 Java 核心库的一部分，是由引导类加载器来加载的；SPI 实现的 Java 类一般是由系统类加载器来加载的。引导类加载器是无法找到 SPI 的实现类的，因为它只加载 Java 的核心库。它也不能代理给系统类加载器，因为它是系统类加载器的祖先类加载器。也就是说，类加载器的代理模式无法解决这个问题。</p></li><li><p>线程上下文类加载器正好解决了这个问题。如果不做任何的设置，Java 应用的线程的上下文类加载器默认就是系统上下文类加载器。在 SPI 接口的代码中使用线程上下文类加载器，就可以成功的加载到 SPI 实现的类。线程上下文类加载器在很多 SPI 的实现中都会用到。</p></li><li><p>下面介绍另外一种加载类的方法：Class.forName。</p></li></ul><h3 id="Class-forName"><a href="#Class-forName" class="headerlink" title="Class.forName"></a>Class.forName</h3><ul><li><p>Class.forName是一个静态方法，同样可以用来加载类。该方法有两种形式：Class.forName(String name, boolean initialize, ClassLoader loader)和 Class.forName(String className)。第一种形式的参数 name表示的是类的全名；initialize表示是否初始化类；loader表示加载时使用的类加载器。第二种形式则相当于设置了参数 initialize的值为 true，loader的值为当前类的类加载器。Class.forName的一个很常见的用法是在加载数据库驱动的时候。如Class.forName(“org.apache.derby.jdbc.EmbeddedDriver”).newInstance()用来加载 Apache Derby 数据库的驱动。</p></li><li><p>在介绍完类加载器相关的基本概念之后，下面介绍如何开发自己的类加载器。</p></li></ul><h3 id="开发自己的类加载器"><a href="#开发自己的类加载器" class="headerlink" title="开发自己的类加载器"></a>开发自己的类加载器</h3><ul><li>虽然在绝大多数情况下，系统默认提供的类加载器实现已经可以满足需求。但是在某些情况下，您还是需要为应用开发出自己的类加载器。比如您的应用通过网络来传输 Java 类的字节代码，为了保证安全性，这些字节代码经过了加密处理。这个时候您就需要自己的类加载器来从某个网络地址上读取加密后的字节代码，接着进行解密和验证，最后定义出要在 Java 虚拟机中运行的类来。下面将通过两个具体的实例来说明类加载器的开发。</li></ul><h3 id="文件系统类加载器"><a href="#文件系统类加载器" class="headerlink" title="文件系统类加载器"></a>文件系统类加载器</h3><ul><li><p>第一个类加载器用来加载存储在文件系统上的 Java 字节代码。完整的实现如 代码清单 6所示。</p></li><li><p>清单 6. 文件系统类加载器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String rootDir; </span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">FileSystemClassLoader</span><span class="params">(String rootDir)</span> </span>&#123; </span><br><span class="line">       <span class="keyword">this</span>.rootDir = rootDir; </span><br><span class="line">   &#125; </span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123; </span><br><span class="line">       <span class="keyword">byte</span>[] classData = getClassData(name); </span><br><span class="line">       <span class="keyword">if</span> (classData == <span class="keyword">null</span>) &#123; </span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(); </span><br><span class="line">       &#125; </span><br><span class="line">       <span class="keyword">else</span> &#123; </span><br><span class="line">           <span class="keyword">return</span> defineClass(name, classData, <span class="number">0</span>, classData.length); </span><br><span class="line">       &#125; </span><br><span class="line">   &#125; </span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">byte</span>[] getClassData(String className) &#123; </span><br><span class="line">       String path = classNameToPath(className); </span><br><span class="line">       <span class="keyword">try</span> &#123; </span><br><span class="line">           InputStream ins = <span class="keyword">new</span> FileInputStream(path); </span><br><span class="line">           ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream(); </span><br><span class="line">           <span class="keyword">int</span> bufferSize = <span class="number">4096</span>; </span><br><span class="line">           <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[bufferSize]; </span><br><span class="line">           <span class="keyword">int</span> bytesNumRead = <span class="number">0</span>; </span><br><span class="line">           <span class="keyword">while</span> ((bytesNumRead = ins.read(buffer)) != -<span class="number">1</span>) &#123; </span><br><span class="line">               baos.write(buffer, <span class="number">0</span>, bytesNumRead); </span><br><span class="line">           &#125; </span><br><span class="line">           <span class="keyword">return</span> baos.toByteArray(); </span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123; </span><br><span class="line">           e.printStackTrace(); </span><br><span class="line">       &#125; </span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">   &#125; </span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> String <span class="title">classNameToPath</span><span class="params">(String className)</span> </span>&#123; </span><br><span class="line">       <span class="keyword">return</span> rootDir + File.separatorChar </span><br><span class="line">               + className.replace(<span class="string">'.'</span>, File.separatorChar) + <span class="string">".class"</span>; </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如 代码清单 6所示，类 FileSystemClassLoader继承自类 java.lang.ClassLoader。在 表 1中列出的java.lang.ClassLoader类的常用方法中，一般来说，自己开发的类加载器只需要覆写 findClass(String name)方法即可。java.lang.ClassLoader类的方法 loadClass()封装了前面提到的代理模式的实现。该方法会首先调用findLoadedClass()方法来检查该类是否已经被加载过；如果没有加载过的话，会调用父类加载器的 loadClass()方法来尝试加载该类；如果父类加载器无法加载该类的话，就调用 findClass()方法来查找该类。因此，为了保证类加载器都正确实现代理模式，在开发自己的类加载器时，最好不要覆写 loadClass()方法，而是覆写 findClass()方法。</p></li><li><p>类 FileSystemClassLoader的 findClass()方法首先根据类的全名在硬盘上查找类的字节代码文件（.class 文件），然后读取该文件内容，最后通过 defineClass()方法来把这些字节代码转换成 java.lang.Class类的实例。</p></li></ul><h3 id="网络类加载器"><a href="#网络类加载器" class="headerlink" title="网络类加载器"></a>网络类加载器</h3><ul><li><p>下面将通过一个网络类加载器来说明如何通过类加载器来实现组件的动态更新。即基本的场景是：Java 字节代码（.class）文件存放在服务器上，客户端通过网络的方式获取字节代码并执行。当有版本更新的时候，只需要替换掉服务器上保存的文件即可。通过类加载器可以比较简单的实现这种需求。</p></li><li><p>类 NetworkClassLoader负责通过网络下载 Java 类字节代码并定义出 Java 类。它的实现与 FileSystemClassLoader类似。在通过 NetworkClassLoader加载了某个版本的类之后，一般有两种做法来使用它。第一种做法是使用 Java 反射 API。另外一种做法是使用接口。需要注意的是，并不能直接在客户端代码中引用从服务器上下载的类，因为客户端代码的类加载器找不到这些类。使用 Java 反射 API 可以直接调用 Java 类的方法。而使用接口的做法则是把接口的类放在客户端中，从服务器上加载实现此接口的不同版本的类。在客户端通过相同的接口来使用这些实现类。网络类加载器的具体代码见 下载。</p></li><li><p>在介绍完如何开发自己的类加载器之后，下面说明类加载器和 Web 容器的关系。</p></li></ul><h3 id="类加载器与-Web-容器"><a href="#类加载器与-Web-容器" class="headerlink" title="类加载器与 Web 容器"></a>类加载器与 Web 容器</h3><ul><li><p>对于运行在 Java EE™容器中的 Web 应用来说，类加载器的实现方式与一般的 Java 应用有所不同。不同的 Web 容器的实现方式也会有所不同。以 Apache Tomcat 来说，每个 Web 应用都有一个对应的类加载器实例。该类加载器也使用代理模式，所不同的是它是首先尝试去加载某个类，如果找不到再代理给父类加载器。这与一般类加载器的顺序是相反的。这是 Java Servlet 规范中的推荐做法，其目的是使得 Web 应用自己的类的优先级高于 Web 容器提供的类。这种代理模式的一个例外是：Java 核心库的类是不在查找范围之内的。这也是为了保证 Java 核心库的类型安全。</p></li><li><p>绝大多数情况下，Web 应用的开发人员不需要考虑与类加载器相关的细节。下面给出几条简单的原则：</p></li><li><p>每个 Web 应用自己的 Java 类文件和使用的库的 jar 包，分别放在 WEB-INF/classes和 WEB-INF/lib目录下面。</p></li><li>多个应用共享的 Java 类文件和 jar 包，分别放在 Web 容器指定的由所有 Web 应用共享的目录下面。</li><li>当出现找不到类的错误时，检查当前类的类加载器和当前线程的上下文类加载器是否正确。<br>在介绍完类加载器与 Web 容器的关系之后，下面介绍它与 OSGi 的关系。</li></ul><h3 id="类加载器与-OSGi"><a href="#类加载器与-OSGi" class="headerlink" title="类加载器与 OSGi"></a>类加载器与 OSGi</h3><ul><li><p>OSGi™是 Java 上的动态模块系统。它为开发人员提供了面向服务和基于组件的运行环境，并提供标准的方式用来管理软件的生命周期。OSGi 已经被实现和部署在很多产品上，在开源社区也得到了广泛的支持。Eclipse 就是基于 OSGi 技术来构建的。</p></li><li><p>OSGi 中的每个模块（bundle）都包含 Java 包和类。模块可以声明它所依赖的需要导入（import）的其它模块的 Java 包和类（通过 Import-Package），也可以声明导出（export）自己的包和类，供其它模块使用（通过 Export-Package）。也就是说需要能够隐藏和共享一个模块中的某些 Java 包和类。这是通过 OSGi 特有的类加载器机制来实现的。OSGi 中的每个模块都有对应的一个类加载器。它负责加载模块自己包含的 Java 包和类。当它需要加载 Java 核心库的类时（以 java开头的包和类），它会代理给父类加载器（通常是启动类加载器）来完成。当它需要加载所导入的 Java 类时，它会代理给导出此 Java 类的模块来完成加载。模块也可以显式的声明某些 Java 包和类，必须由父类加载器来加载。只需要设置系统属性 org.osgi.framework.bootdelegation的值即可。</p></li><li><p>假设有两个模块 bundleA 和 bundleB，它们都有自己对应的类加载器 classLoaderA 和 classLoaderB。在 bundleA 中包含类 com.bundleA.Sample，并且该类被声明为导出的，也就是说可以被其它模块所使用的。bundleB 声明了导入 bundleA 提供的类 com.bundleA.Sample，并包含一个类 com.bundleB.NewSample继承自 com.bundleA.Sample。在 bundleB 启动的时候，其类加载器 classLoaderB 需要加载类 com.bundleB.NewSample，进而需要加载类com.bundleA.Sample。由于 bundleB 声明了类 com.bundleA.Sample是导入的，classLoaderB 把加载类com.bundleA.Sample的工作代理给导出该类的 bundleA 的类加载器 classLoaderA。classLoaderA 在其模块内部查找类com.bundleA.Sample并定义它，所得到的类 com.bundleA.Sample实例就可以被所有声明导入了此类的模块使用。对于以java开头的类，都是由父类加载器来加载的。如果声明了系统属性org.osgi.framework.bootdelegation=com.example.core.*，那么对于包 com.example.core中的类，都是由父类加载器来完成的。</p></li><li><p>OSGi 模块的这种类加载器结构，使得一个类的不同版本可以共存在 Java 虚拟机中，带来了很大的灵活性。不过它的这种不同，也会给开发人员带来一些麻烦，尤其当模块需要使用第三方提供的库的时候。下面提供几条比较好的建议：</p></li><li><p>如果一个类库只有一个模块使用，把该类库的 jar 包放在模块中，在 Bundle-ClassPath中指明即可。</p></li><li>如果一个类库被多个模块共用，可以为这个类库单独的创建一个模块，把其它模块需要用到的 Java 包声明为导出的。其它模块声明导入这些类。</li><li><p>如果类库提供了 SPI 接口，并且利用线程上下文类加载器来加载 SPI 实现的 Java 类，有可能会找不到 Java 类。如果出现了 NoClassDefFoundError异常，首先检查当前线程的上下文类加载器是否正确。通过Thread.currentThread().getContextClassLoader()就可以得到该类加载器。该类加载器应该是该模块对应的类加载器。如果不是的话，可以首先通过 class.getClassLoader()来得到模块对应的类加载器，再通过Thread.currentThread().setContextClassLoader()来设置当前线程的上下文类加载器。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3></li><li><p>类加载器是 Java 语言的一个创新。它使得动态安装和更新软件组件成为可能。本文详细介绍了类加载器的相关话题，包括基本概念、代理模式、线程上下文类加载器、与 Web 容器和 OSGi 的关系等。开发人员在遇到ClassNotFoundException和 NoClassDefFoundError等异常的时候，应该检查抛出异常的类的类加载器和当前线程的上下文类加载器，从中可以发现问题的所在。在开发自己的类加载器的时候，需要注意与已有的类加载器组织结构的协调。</p></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="http://ju.outofmemory.cn/entry/142486" target="_blank" rel="noopener">java类加载机制工作原理</a></li><li><a href="http://blog.csdn.net/gjanyanlig/article/details/6818655" target="_blank" rel="noopener">Java类加载器总结 - 寂静大海 - 博客频道 - CSDN.NET</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;类加载器是 Java 语言的一个创新，也是 Java 语言流行的重要原因之一。它使得 Java 类可以被动态加载到 Java 虚拟机中并执行。类加载器从 JDK 1.0 就出现了，最初是为了满足 Java Applet 的需要而开发出来的。Java Applet
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java基础巩固之反射(1)</title>
    <link href="github.com:cnAJun/cnAJun.github.io/2014/12/02/Untitled/"/>
    <id>github.com:cnAJun/cnAJun.github.io/2014/12/02/Untitled/</id>
    <published>2014-12-02T15:20:00.000Z</published>
    <updated>2018-12-03T02:37:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="反射-类的加载概述和加载时机"><a href="#反射-类的加载概述和加载时机" class="headerlink" title="反射-类的加载概述和加载时机"></a>反射-类的加载概述和加载时机</h3><ul><li><p>A:类的加载概述</p><ul><li>当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过加载，连接，初始化三步来实现对这个类进行初始化。</li><li>加载 <ul><li>就是指将class文件读入内存，并为之创建一个Class对象。任何类被使用时系统都会建立一个Class对象。</li></ul></li><li><p>连接</p><ul><li>验证 是否有正确的内部结构，并和其他类协调一致</li><li>准备 负责为类的静态成员分配内存，并设置默认初始化值</li><li>解析 将类的二进制数据中的符号引用替换为直接引用</li></ul></li><li><p>初始化 就是我们以前讲过的初始化步骤</p></li></ul></li></ul><a id="more"></a><ul><li>B:加载时机<ul><li>创建类的实例</li><li>访问类的静态变量，或者为静态变量赋值</li><li>调用类的静态方法</li><li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li><li>初始化某个类的子类</li><li>直接使用java.exe命令来运行某个主类</li></ul></li></ul><p>###27.02_反射(类加载器的概述和分类)</p><ul><li>A:类加载器的概述<ul><li>负责将.class文件加载到内存中，并为之生成对应的Class对象。虽然我们不需要关心类加载机制，但是了解这个机制我们就能更好的理解程序的运行。</li></ul></li><li>B:类加载器的分类<ul><li>Bootstrap ClassLoader 根类加载器</li><li>Extension ClassLoader 扩展类加载器</li><li>Sysetm ClassLoader 系统类加载器</li></ul></li><li>C:类加载器的作用<ul><li>Bootstrap ClassLoader 根类加载器<ul><li>也被称为引导类加载器，负责Java核心类的加载</li><li>比如System,String等。在JDK中JRE的lib目录下rt.jar文件中</li></ul></li><li>Extension ClassLoader 扩展类加载器<ul><li>负责JRE的扩展目录中jar包的加载。</li><li>在JDK中JRE的lib目录下ext目录</li></ul></li><li>Sysetm ClassLoader 系统类加载器<ul><li>负责在JVM启动时加载来自java命令的class文件，以及classpath环境变量所指定的jar包和类路径</li></ul></li></ul></li></ul><p>###27.03_反射(反射概述)</p><ul><li><p>A:反射概述</p><ul><li>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；</li><li>对于任意一个对象，都能够调用它的任意一个方法和属性；</li><li>这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</li><li>要想解剖一个类,必须先要获取到该类的字节码文件对象。</li><li>而解剖使用的就是Class类中的方法，所以先要获取到每一个字节码文件对应的Class类型的对象。</li></ul></li><li><p>B:三种方式</p><ul><li>a:Object类的getClass()方法,判断两个对象是否是同一个字节码文件</li><li>b:静态属性class,锁对象</li><li>c:Class类中静态方法forName(),读取配置文件</li></ul></li><li>C:案例演示<ul><li>获取class文件对象的三种方式</li></ul></li></ul><h3 id="反射-Class-forName-读取配置文件举例"><a href="#反射-Class-forName-读取配置文件举例" class="headerlink" title="反射-Class.forName()读取配置文件举例"></a>反射-Class.forName()读取配置文件举例</h3><ul><li>榨汁机(Juicer)榨汁的案例</li><li>分别有水果(Fruit)苹果(Apple)香蕉(Banana)桔子(Orange)榨汁(squeeze)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_Reflect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 榨汁机(Juicer)榨汁的案例</span></span><br><span class="line"><span class="comment"> * 分别有水果(Fruit)苹果(Apple)香蕉(Banana)桔子(Orange)榨汁(squeeze)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">/*Juicer j = new Juicer();</span></span><br><span class="line"><span class="comment">//j.run(new Apple());</span></span><br><span class="line"><span class="comment">j.run(new Orange());*/</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"config.properties"</span>));<span class="comment">//创建输入流对象,关联配置文件</span></span><br><span class="line">Class&lt;?&gt; clazz = Class.forName(br.readLine());<span class="comment">//读取配置文件一行内容,获取该类的字节码对象</span></span><br><span class="line">Fruit f = (Fruit) clazz.newInstance();<span class="comment">//通过字节码对象创建实例对象</span></span><br><span class="line">Juicer j = <span class="keyword">new</span> Juicer();</span><br><span class="line">j.run(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">squeeze</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">squeeze</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"榨出一杯苹果汁儿"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Orange</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">squeeze</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"榨出一杯桔子汁儿"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Juicer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Fruit f)</span> </span>&#123;</span><br><span class="line">f.squeeze();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反射-通过反射获取带参构造方法并使用"><a href="#反射-通过反射获取带参构造方法并使用" class="headerlink" title="反射-通过反射获取带参构造方法并使用"></a>反射-通过反射获取带参构造方法并使用</h3><ul><li>Constructor<ul><li>Class类的newInstance()方法是使用该类无参的构造函数创建对象, 如果一个类没有无参的构造函数, 就不能这样创建了,可以调用Class类的getConstructor(String.class,int.class)方法获取一个指定的构造函数然后再调用Constructor类的newInstance(“张三”,20)方法创建对象</li></ul></li></ul><h3 id="反射-通过反射获取成员变量并使用"><a href="#反射-通过反射获取成员变量并使用" class="headerlink" title="反射-通过反射获取成员变量并使用"></a>反射-通过反射获取成员变量并使用</h3><ul><li>Field<ul><li>Class.getField(String)方法可以获取类中的指定字段(可见的), 如果是私有的可以用getDeclaedField(“name”)方法获取,通过set(obj, “李四”)方法可以设置指定对象上该字段的值, 如果是私有的需要先调用setAccessible(true)设置访问权限,用获取的指定的字段调用get(obj)可以获取指定对象中该字段的值</li></ul></li></ul><h3 id="反射-通过反射获取方法并使用"><a href="#反射-通过反射获取方法并使用" class="headerlink" title="反射-通过反射获取方法并使用"></a>反射-通过反射获取方法并使用</h3><ul><li>Method<ul><li>Class.getMethod(String, Class…) 和 Class.getDeclaredMethod(String, Class…)方法可以获取类中的指定方法,调用invoke(Object, Object…)可以调用该方法,Class.getMethod(“eat”) invoke(obj) Class.getMethod(“eat”,int.class) invoke(obj,10)</li></ul></li></ul><h3 id="反射-通过反射越过泛型检查"><a href="#反射-通过反射越过泛型检查" class="headerlink" title="反射-通过反射越过泛型检查"></a>反射-通过反射越过泛型检查</h3><ul><li>A:案例演示<ul><li>ArrayList<integer>的一个对象，在这个集合中添加一个字符串数据，如何实现呢？</integer></li></ul></li></ul><h3 id="反射-通过反射写一个通用的设置某个对象的某个属性为指定的值"><a href="#反射-通过反射写一个通用的设置某个对象的某个属性为指定的值" class="headerlink" title="反射-通过反射写一个通用的设置某个对象的某个属性为指定的值"></a>反射-通过反射写一个通用的设置某个对象的某个属性为指定的值</h3><ul><li>public void setProperty(Object obj, String propertyName, Object value){}，此方法可将obj对象中名为propertyName的属性的值设置为value。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;反射-类的加载概述和加载时机&quot;&gt;&lt;a href=&quot;#反射-类的加载概述和加载时机&quot; class=&quot;headerlink&quot; title=&quot;反射-类的加载概述和加载时机&quot;&gt;&lt;/a&gt;反射-类的加载概述和加载时机&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A:类的加载概述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过加载，连接，初始化三步来实现对这个类进行初始化。&lt;/li&gt;
&lt;li&gt;加载 &lt;ul&gt;
&lt;li&gt;就是指将class文件读入内存，并为之创建一个Class对象。任何类被使用时系统都会建立一个Class对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;连接&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;验证 是否有正确的内部结构，并和其他类协调一致&lt;/li&gt;
&lt;li&gt;准备 负责为类的静态成员分配内存，并设置默认初始化值&lt;/li&gt;
&lt;li&gt;解析 将类的二进制数据中的符号引用替换为直接引用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;初始化 就是我们以前讲过的初始化步骤&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程语言" scheme="github.com:cnAJun/cnAJun.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="JAVA" scheme="github.com:cnAJun/cnAJun.github.io/tags/JAVA/"/>
    
  </entry>
  
</feed>
